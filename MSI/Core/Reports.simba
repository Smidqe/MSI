(*
Reports
=======

The Reports file includes all the different elements of MSI's progress report.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Skills/Core.simba>`_.

*)

(*
MSI_SetSkillLevels
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetSkillLevels();

Gets and sets each player's skill levels for each on if their scripts.  This
procedure is called before the progress report.

.. note::

  | Author: Coh3n
  | Last Updated: 15 May 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetSkillLevels();
*)
procedure MSI_SetSkillLevels();
var
  i, curLev: Integer;
  script: TScript;
begin
  if (not loggedIn) then
    exit;

  script := MSI_Players[CurrentPlayer].GetScript();
  if (script.skillConst = SKILL_NONE) then
    exit;

  MSI_AddHeader('MSI_SetSkillLevels');

  case MSI_PointerCall(MSI_OnGetSkillLevels, []) of
    EXTRA_CONTINUE: ;
    EXTRA_EXIT: Exit;
  end;

  with MSI_Players[CurrentPlayer] do
    for i := 0 to High(Scripts) do
    begin
      curLev := GetSkillLevel(MSI_Scripts[Scripts[i].Name].SkillConst);

      // Only sets if the level has increased
      if (curLev <= ReportInfo.SkillLevels[i]) then
      begin
        MSI_Debug(Capitalize(MSI_Scripts[Scripts[i].Name].SkillName) + ' level hasn''t changed');
        Continue;
      end;

      // Set the ReportInfo attribute
      ReportInfo.SkillLevels[i] := curLev;

      with MSI_Scripts[Scripts[i].Name] do
        MSI_Debug(SkillName + ' Level: ' + IntToStr(ReportInfo.SkillLevels[i]));
    end;

  MSI_CloseHeader('MSI_SetSkillLevels: Finished');
end;

(*
MSI_SetReportItems
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetReportItems(pIndex, sIndex: Integer; preset, default: TIntegerArray): TIntegerArray;

Returns a player's script's new array depending on the parameters given.  The
new array could represent objects or materials (as of right now).
    - pIndex: The index of the player in MSI_Players
    - sIndex: The index of the script in MSI_Players[pIndex].Scripts
    - preset: The objects/materials set in DeclarePlayers
    - default: The default objects/materials set in the script's record

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetReportInfo(i, j, scripts[j].trees, MSI_Scripts[scripts[j].name].defaults.trees, new);
*)
function MSI_SetReportItems(pIndex, sIndex: Integer; preset, default: TIntegerArray): TIntegerArray;
var
  i, l, h: integer;
  script: TScript;
  obj: TMSObject;
  mat: TMaterial;
begin
  with MSI_Players[pIndex] do
  begin
    script := MSI_Scripts[Scripts[sIndex].name];

    if (length(preset) = 0) then
      result := default
    else
      result := preset;

    h := high(result);
    l := (h + 1);
    setLength(reportInfo.items[sIndex], l);
    setLength(reportInfo.itemAmounts[sIndex], l);

    for i := 0 to h do
      with MSI_Players[pIndex].reportInfo do
      begin
        case script.skillConst of
          SKILL_WOODCUTTING, SKILL_MINING, SKILL_FISHING: // skills that use objects
            begin
              obj := MSI_GetObject(result[i]);
              setLength(items[sIndex][i], length(obj.associatedItems));
              items[sIndex][i] := obj.associatedItems;
            end;

          SKILL_COOKING, SKILL_NONE, SKILL_RUNECRAFTING: // skills that use materials
            begin
              mat := MSI_GetMaterial(result[i]);
              setLength(items[sIndex][i], length(mat.produces));
              items[sIndex][i] := mat.produces;
            end;
        end;

        setLength(itemAmounts[sIndex][i], length(items[sIndex][i]));
      end;

    MSI_SubDebug('Player['+toStr(pIndex)+'].Script['+toStr(sIndex)+'].ReportInfo.Items := '+toStr(reportInfo.items));
  end;
end;

(*
MSI_SetPlayerInfo
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetReportInfo();

Sets the necessary player information (called at the beginning of MSI_MainLoop).
Includes handling of default objects if the user decides not to specify for a
certain player.  Also sets all the required information for the MSI progress
report.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetPlayerInfo();
*)
procedure MSI_SetReportInfo();
var
  i, j, h, l: integer;
  script: TScript;
begin
  for i := 0 to high(MSI_Players) do
    with MSI_Players[i] do
    begin
      h := high(scripts);
      l := (h + 1);

      setLength(reportInfo.items, l);
      setLength(reportInfo.itemAmounts, l);
      setLength(reportInfo.casts, l);

      for j := 0 to h do
      begin
        script := MSI_Scripts[scripts[j].name];

        case (script.skillConst) of // need to set specific attributes depending on the skill
          SKILL_WOODCUTTING:
            scripts[j].trees := MSI_SetReportItems(i, j, scripts[j].trees, script.defaults.trees);

          SKILL_MINING:
            scripts[j].rocks := MSI_SetReportItems(i, j, scripts[j].rocks, script.defaults.rocks);

          SKILL_FISHING:
            scripts[j].fishSpots := MSI_SetReportItems(i, j, scripts[j].fishSpots, script.defaults.fishSpots);

          SKILL_COOKING, SKILL_NONE, SKILL_RUNECRAFTING:
            begin
              scripts[j].materials := MSI_SetReportItems(i, j, scripts[j].materials, script.defaults.materials);
              scripts[j].objects := script.defaults.objects;

              if (script.skillConst = SKILL_COOKING) then
                scripts[j].cookingSpot := script.defaults.cookingSpot;

              if (script.skillConst = SKILL_RUNECRAFTING) then
                scripts[j].tiara := script.defaults.tiara;
            end;

          SKILL_MAGIC:
            begin
              // Set to default spells if needed
              if (length(scripts[j].spells) <= 0) then
              begin
                setLength(scripts[j].staffs, length(script.defaults.spells));
                scripts[j].spells := script.defaults.spells;
              end;

              setLength(reportInfo.casts[j], length(scripts[j].spells));
              scripts[j].staffType := script.defaults.staffType; // Automatically set to default until other options are added
            end;

          else
            MSI_Debug('ERROR: Invalid skill in MSI_SetPlayerInfo');
        end;
      end;
    end;
end;

(*
MSI_MagicReport
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_MagicReport(FileName, PlayerIndex, ScriptIndex: Integer);

Simply prints the report for a magic script. 'FileName' refers to the file to
save the report to.  'PlayerIndex' and 'ScriptIndex' refer to the index in the
player array and their respective script that we want to print.

.. note::

  | Author: Coh3n
  | Last Updated: 08 July 2011 by Coh3n

Example:

.. code-block:: pascal

  for i := 0 to High(MSI_Players) do
    for j := 0 to High(MSI_Players[i].Scripts) do
      MSI_MagicReport(FileName, i, j);
*)
procedure MSI_MagicReport(FileName, PlayerIndex, ScriptIndex: Integer);
var
  i: Integer;
begin
  with MSI_Players[PlayerIndex].ReportInfo do
  begin
    MSI_PrintSave(FileName, '{       ' + PadR('Casts: ' + IntToStr(ScriptCounts[ScriptIndex]), 57) + '}');

    for i := 0 to High(Casts[ScriptIndex]) do
    begin
      if (Casts[ScriptIndex][i] <= 0) then
        continue;

      MSI_PrintSave(FileName, '{         ' + PadR('Spell: ' + MSI_Spells[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Spells[i]].Name, 55) + '}');
      MSI_PrintSave(FileName, '{         ' + PadR('Casts: ' + IntToStr(Casts[ScriptIndex][i]), 55) + '}');
    end;
  end;
end;

(*
MSI_StandardReport
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_StandardReport(FileName, PlayerIndex, ScriptIndex: Integer);

Simply prints the report for the gathering skills: mining, fishing, and
woodcutting.  The paramters are the same as MSI_MagicReport.

.. note::

  | Author: Coh3n
  | Last Updated: 20 April 2011 by Coh3n

Example:

.. code-block:: pascal

  for i := 0 to High(MSI_Players) do
    for j := 0 to High(MSI_Players[i].Scripts) do
      MSI_StandardReport(FileName, i, j);
*)
procedure MSI_StandardReport(FileName, PlayerIndex, ScriptIndex: Integer);
var
  i, j: Integer;
begin
  with MSI_Players[PlayerIndex].ReportInfo do
    begin
      MSI_PrintSave(FileName, '{       ' + PadR('Loads: ' + IntToStr(ScriptCounts[ScriptIndex]), 57) + '}');

      for i := 0 to High(Items[ScriptIndex]) do
        for j := 0 to High(Items[ScriptIndex][i]) do
        begin
          // Don't print the ones that are 0
          if (ItemAmounts[ScriptIndex][i][j] <= 0) then
            Continue;

          MSI_PrintSave(FileName, '{         ' + PadR('Item:   ' + MSI_Items[Items[ScriptIndex][i][j]].Name, 55) + '}');
          MSI_PrintSave(FileName, '{         ' + PadR('Amount: ' + GroupDigits(ItemAmounts[ScriptIndex][i][j], ','), 55) + '}');
        end;
    end;
end;

(*
MSI_ShortReport
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_ShortReport(FileName: Integer);

This is basically just a "totals" report for those who like to auto using an
army.  MSI will print both this version and the long version.  It also saves
both versions to a file in the MSI/ProgressReports folder.

.. note::

  | Author: Coh3n
  | Last Updated: 25 November 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_ShortReport(FileName);

  // An example output
  {----------------------------------------------------------------}
  {                    MSI Phoenix Short Report                    }
  {----------------------------------------------------------------}
  {     Time Running: 6 Hours, 24 Minutes and 56 Seconds           }
  {----------------------------------------------------------------}
  {                                                                }
  {        Totals:                                                 }
  {         - Players:         4                                   }
  {         - Player Time:     06h 10m 43s                         }
  {         - Loads:           57                                  }
  {         - Experience:      7,965                               }
  {         - Rocks Mined:     1,593                               }
  {                                                                }
  {----------------------------------------------------------------}
  {----------------------------------------------------------------}
*)
const
  TOTAL_TIME  = 0;
  TOTAL_LOADS = 1;
  TOTAL_EXP   = 2;
  TOTAL_TREES = 3;
  TOTAL_ROCKS = 4;
  TOTAL_FISH  = 5;
  TOTAL_CASTS = 6;
  TOTAL_COOKS = 7;
  TOTAL_SOFTENS = 8;
  TOTAL_FILLS = 9;
  TOTAL_CRAFTS = 10;

procedure MSI_ShortReport(FileName: Integer);
var
  i, j, k, l: Integer;
  totals: array[0..10] of Integer;
  labels: TStringArray;
begin
  MSI_PrintSave(FileName, '{----------------------------------------------------------------}');                             //64 from '{' to '}'
  MSI_PrintSave(FileName, '{                    MSI Phoenix Short Report                    }');
  MSI_PrintSave(FileName, '{----------------------------------------------------------------}');
  MSI_PrintSave(FileName, '{     ' + PadR('Time Running: ' + TimeRunning, 59) + '}');
  MSI_PrintSave(FileName, '{----------------------------------------------------------------}');
  MSI_PrintSave(FileName, '{                                                                }');
  MSI_PrintSave(FileName, '{        '+PadR('Totals:', 56)+'}');
  MSI_PrintSave(FileName, '{         - '+PadR('Players:           '+IntToStr(HowManyPlayers), 53)+'}');

  for i := 0 to High(MSI_Players) do
  with MSI_Players[i] do
  begin
    IncEx(totals[TOTAL_TIME], ReportInfo.PlayerTime);
    IncEx(totals[TOTAL_LOADS], ReportInfo.LoadsDone);

    for j := 0 to High(Scripts) do
    begin
      IncEx(totals[TOTAL_EXP], ReportInfo.GainedExps[j]);

      for k := 0 to High(Scripts[j].Spells) do
        IncEx(totals[TOTAL_CASTS], ReportInfo.Casts[j][k]);

      for k := 0 to High(ReportInfo.ItemAmounts[j]) do
        for l := 0 to High(ReportInfo.ItemAmounts[j][k]) do
          case MSI_Scripts[Scripts[j].Name].SkillConst of
            SKILL_WOODCUTTING:
              IncEx(totals[TOTAL_TREES], ReportInfo.ItemAmounts[j][k][l]);

            SKILL_MINING:
              IncEx(totals[TOTAL_ROCKS], ReportInfo.ItemAmounts[j][k][l]);

            SKILL_FISHING:
              IncEx(totals[TOTAL_FISH], ReportInfo.ItemAmounts[j][k][l]);

            SKILL_COOKING:
              IncEx(totals[TOTAL_COOKS], ReportInfo.ItemAmounts[j][k][l]);

            SKILL_RUNECRAFTING:
              IncEx(totals[TOTAL_CRAFTS], ReportInfo.ItemAmounts[j][k][l]);

            SKILL_NONE:
              case Scripts[j].Name of
                SCRIPT_VE_SOFTENER, SCRIPT_EV_SOFTENER, SCRIPT_FW_SOFTENER:
                  IncEx(totals[TOTAL_SOFTENS], ReportInfo.ItemAmounts[j][k][l]);

                SCRIPT_VE_FILLER, SCRIPT_FW_FILLER:
                  IncEx(totals[TOTAL_FILLS], ReportInfo.ItemAmounts[j][k][l]);
              end;
          end;
    end;
  end;

  MSI_PrintSave(FileName, '{         - '+PadR('Player Time:       '+MsToTime(totals[TOTAL_TIME], TIME_SHORT), 53)+'}');

  {$IFDEF REFLECTION}
    MSI_PrintSave(FileName, '{         - '+PadR('Randoms Solved:    '+IntToStr(Length(RandomsResult(Result_Randoms_Solved))), 53)+'}');
    MSI_PrintSave(FileName, '{         - '+PadR('Randoms Failed:    '+IntToStr(Length(RandomsResult(Result_Randoms_Failed))), 53)+'}');
  {$ENDIF}

  labels := ['', 'Loads:', 'Experience:', 'Logs Chopped:', 'Rocks Mined:', 'Fish Caught:', 'Spells Cast:', 'Food Cooked:', 'Clay Softened:', 'Containers Filled:', 'Runes Crafted'];
  for i := 0 to High(totals) do
  begin
    if ((totals[i] <= 0) or (labels[i] = '')) then
      Continue;

    MSI_PrintSave(FileName, '{         - '+PadR(PadR(labels[i], 19)+GroupDigits(totals[i], ','), 53)+'}');
  end;

  MSI_PrintSave(FileName, '{                                                                }');
  MSI_PrintSave(FileName, '{----------------------------------------------------------------}');
  MSI_PrintSave(FileName, '{----------------------------------------------------------------}');
  MSI_PrintSave(FileName, '');
end;

(*
MSI_ProgressReport
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_ProgressReport;

Here's the main progress report.  It combines all the other smaller reports into
one that prints the total information plus individual character information.  It
also saves the progress report in MSI/Progress Reports.

.. note::

  | Author: Coh3n
  | Last Updated: 08 April 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_ShortReport(FileName);

  // An example output
  {----------------------------------------------------------------}
  {                    MSI Phoenix Player Report                   }
  {------------------------- Revision 534 -------------------------}
  {     Time Running: 22 Hours, 18 Minutes and 39 Seconds          }
  {----------------------------------------------------------------}
  {                                                                }
  {     Player 0: ************                                     }
  {     Location: Draynor Village bank                             }
  {     Time:     06h 08m 54s                                      }
  {     Active:   False                                            }
  {       Reason: Finished total time!                             }
  {                                                                }
  {     Script: Lumby Swamp West Miner                             }
  {       Time:  06h 08m 54s                                       }
  {       Skill: Mining                                            }
  {       Exp:   37,400                                            }
  {       Level: 65                                                }
  {       Loads: 28                                                }
  {         Item:   Coal ore                                       }
  {         Amount: 748                                            }
  {                                                                }
  {----------------------------------------------------------------}
  {                                                                }
  {     Player 2: ***********                                      }
  {     Location: Stiles on Karamja (SRL Members+)                 }
  {     Time:     03h 43m 45s                                      }
  {     Active:   False                                            }
  {       Reason: Failed to exchange with NPC: Stiles              }
  {                                                                }
  {     Script: Karamja Stiles Noter                               }
  {       Time:  03h 43m 45s                                       }
  {       Skill: Fishing                                           }
  {       Exp:   67,320                                            }
  {       Level: 74                                                }
  {       Loads: 28                                                }
  {         Item:   Raw lobster                                    }
  {         Amount: 748                                            }
  {                                                                }
  {----------------------------------------------------------------}
  {----------------------------------------------------------------}
*)
procedure MSI_ProgressReport;
var
  i, j, f: Integer;
  b: Boolean;
begin
  {$IFDEF DEBUG_REFLECTION}
  list_allocated_objects();
  {$ENDIF}

  f := -1;
  if (MSI_Settings[SETUP_SAVE_REPORT]) then
    try
      f := RewriteFile(PATH_REPORT + ScriptStart + '.txt', False);
      WriteFileString(f, 'This progress report was written ' +
                      TheDate(Date_Formal)+ ' at ' + TheTime + #13 + #10);
    except
    end;

  MSI_SetSkillLevels();

  ClearDebug;
  SetScriptProp(SP_WriteTimeStamp, [False]);

  SRLRandomsReport;
  b := MSI_Settings[SETUP_PRINT_REPORT];
  if (not b) then
    MSI_Settings[SETUP_PRINT_REPORT] := True;
  MSI_ShortReport(f);
  if (not b) then
    MSI_Settings[SETUP_PRINT_REPORT] := False;

  MSI_PrintSave(f, '{----------------------------------------------------------------}');                             //64 from '{' to '}'
  MSI_PrintSave(f, '{                    MSI Phoenix Player Report                   }');
  MSI_PrintSave(f, '{----------------------------------------------------------------}');
  MSI_PrintSave(f, '{     ' + PadR('Time Running: ' + TimeRunning, 59) + '}');
  MSI_PrintSave(f, '{----------------------------------------------------------------}');

  for i := 0 to (HowManyPlayers - 1) do
  begin
    MSI_Players[i].Active := Players[i].Active;

    with MSI_Players[i] do
    begin
      // Don't print players that were set inactive by user
      if (ReportInfo.FalseReason = 'User set to false') then
        Continue;

      MSI_PrintSave(f, '{                                                                }');
      MSI_PrintSave(f, '{     ' + PadR('Player ' + IntToStr(i) + ': ' + Capitalize(Name), 59) + '}');
      MSI_PrintSave(f, '{     ' + PadR('Location: ' + MSI_Locations[Location].Name, 59) + '}');
      MSI_PrintSave(f, '{     ' + PadR('Time:     ' + MsToTime(ReportInfo.PlayerTime, TIME_SHORT), 59) + '}');
      MSI_PrintSave(f, '{     ' + PadR('Active:   ' + Capitalize(BoolToStr(Active)), 59) + '}');

      if (not Active) then
        MSI_PrintSave(f, '{       ' + PadR('Reason: ' + ReportInfo.FalseReason, 57) + '}');

      MSI_PrintSave(f, '{                                                                }');

      for j := 0 to High(Scripts) do
      begin
        MSI_PrintSave(f, '{     ' + PadR('Script: ' + MSI_Scripts[Scripts[j].Name].Name, 59) + '}');
        MSI_PrintSave(f, '{       ' + PadR('Time:  ' + MsToTime(ReportInfo.ScriptTimes[j], Time_Short), 57) + '}');

        if (MSI_Scripts[Scripts[j].Name].SkillName <> 'N/A') then
        begin
          MSI_PrintSave(f, '{       ' + PadR('Skill: ' + MSI_Scripts[Scripts[j].Name].SkillName, 57) + '}');
          MSI_PrintSave(f, '{       ' + PadR('Exp:   ' + GroupDigits(ReportInfo.GainedExps[j], ','), 57) + '}');

          if (ReportInfo.SkillLevels[j] < 1) then
            MSI_PrintSave(f, '{       ' + PadR('Level: Not yet defined', 57) + '}')
          else
            MSI_PrintSave(f, '{       ' + PadR('Level: ' + IntToStr(ReportInfo.SkillLevels[j]), 57) + '}');
        end;

        case MSI_Scripts[Scripts[j].Name].SkillConst of
          SKILL_MINING, SKILL_WOODCUTTING, SKILL_FISHING, SKILL_COOKING,
          SKILL_NONE, SKILL_RUNECRAFTING:
            MSI_StandardReport(f, i, j);

          SKILL_MAGIC:
            MSI_MagicReport(f, i, j);
        end;

        MSI_PrintSave(f, '{                                                                }');
      end;
    end;

    MSI_PrintSave(f, '{----------------------------------------------------------------}');
  end;
  MSI_PrintSave(f, '{----------------------------------------------------------------}');

  if (f <> -1) then
    CloseFile(f);
  SetScriptProp(SP_WriteTimeStamp, [True]);
end;

(*
MSI_SetupReportsGUI
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetupReportsGUI();

Sets up the script so it uses reportsGUI.simba in SRL/misc/.

.. note::

  | Author: Coh3n
  | Last Updated: March 15th, 2012 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetupReportsGUI();
*)
procedure MSI_SetupReportsGUI();
begin
{
  Progress_ScriptName := 'MSI Phoenix Scripts';
  Progress_SetupEx(Rect(0, 0, 650, 350));

  Progress_ChangeInterval(5000); // every 2 minutes
  OnProgressUpdate := @MSI_ProgressReport;

  Progress_Show;
}
end;


