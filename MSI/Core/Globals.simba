(*
Globals
=======

The Globals file is where all MSI's global variables, constants, and types are
declared.  There are some exceptions, however, which are used in the different
skill files.  Keep in mind that any of MSI's global arrays are only accessable
after MSI_Setup has been called.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Globals.simba>`_.

*)

(*
Abbreviations
~~~~~~~~~~~~~

These are all the abbreviations we use in MSI constants and variables.

.. note::

  | GE: Grand Exchange
  | VE: Varrock East
  | VW: Varrock West
  | FW: Falador West
  | FE: Falador East
  | MG: Mining Guild
  | CG: Crafting Guild
  | AK: Al Kharid
  | LB: Lumbridge
  | EV: EdgeVille
  | BBV: Barbarian Village
  | DB: Draynor Bank
  | RM: Rimmington
  | PS: Port Sarim
  | SV: Seers Village
  | LSW: Lumbridge Swamp West
  | LSE: Lumbridge Swamp East
  | KJ: Karamja
  | CB: Catherby
  | RC: Runecrafting
  | FG: Fishing Guild
  | Y: Yanille
  | FC: Fishing Colony(Piscatoris)

*)

{==============================================================================\
|                                Constants                                     |
\==============================================================================}

(*
Miscellaneous Constants
~~~~~~~~~~~~~~~~~~~~~~~

The miscellaneous constants are used throughout MSI multiple times.  Having them
as constants makes it much easier for them to be updated.  They are also
advanced settings the user can alter to their liking.  These constants include
anything from randomness percentage to bank symbol accuracy.
*)
const
  ANTI_BAN_CHANCE      = 10;    // The chance (in %) of performing antiban
  RANDOM_TIME_PERCENT  = 0.30;  // The percent of BreakLoads/TotalLoads/BreakTime/TotalTime to use for randomness.
  DTM_TOLERANCE        = 10;    // Tolerance on the DTMs

  // PLB = Player Box (a tight box around the player); used in animations
  PLBX1 = MSCX - 10;
  PLBY1 = MSCY - 25;
  PLBX2 = MSCX + 15;
  PLBY2 = MSCY + 15;

  MM_BLACK = 263168; // Black color on the minimap; used for some obstacle's mirror

(*
Script Constants
~~~~~~~~~~~~~~~~

The Script constants represent the index of the MSI_Scripts array that stores
all the script information for that particular script.  To access all the script
information for Varrock East Miner, for example, you would do something like:

Example:

.. code-block:: pascal

  function GetVEMiner(): TScript;
  begin
    Result := MSI_Scripts[SCRIPT_VE_MINER];
  end;
*)
const
  // Woodcutting
  SCRIPT_POWER_CHOP = 10;
  SCRIPT_VE_OAKS    = 11;
  SCRIPT_GE_YEWS    = 12;
  SCRIPT_GE_OAKS    = 13;
  SCRIPT_DB_WILLOWS = 14;
  SCRIPT_DB_TREES   = 15;
  SCRIPT_DB_OAKS    = 16;
  SCRIPT_DB_YEWS    = 17;
  SCRIPT_RM_YEWS    = 18;
  SCRIPT_RM_WILLOWS = 19;
  SCRIPT_PS_WILLOWS = 20;
  SCRIPT_PS_YEWS    = 21;
  SCRIPT_SV_MAGICS  = 22;
  SCRIPT_SV_MAPLES  = 23;
  SCRIPT_SV_YEWS    = 24;
  SCRIPT_SV_OAKS    = 25;
  SCRIPT_SV_TREES   = 26;
  SCRIPT_EV_YEWS    = 27;

  // Mining
  SCRIPT_POWER_MINER = 30;
  SCRIPT_VE_MINER    = 31;
  SCRIPT_VW_MINER    = 32;
  SCRIPT_LSW_MINER   = 33;
  SCRIPT_LSE_MINER   = 34;
  SCRIPT_BBV_MINER   = 35;
  SCRIPT_RM_MINER    = 36;
  SCRIPT_GUILD_MINER = 37;
  SCRIPT_DB_CLAY     = 38;
  SCRIPT_FW_MINER    = 39;
  SCRIPT_AK_MINER    = 40;
  SCRIPT_CG_MINER    = 41;
  SCRIPT_Y_MINER     = 126;

  // Fishing
  SCRIPT_POWER_FISHER = 50;
  SCRIPT_DB_FISHER    = 51;
  SCRIPT_BBV_FISHER   = 52;
  SCRIPT_KJ_NOTER     = 53;
  SCRIPT_CB_FISHER    = 54;
  SCRIPT_FG_FISHER    = 55;
  SCRIPT_FC_FISHER    = 127;

  // Cooking
  SCRIPT_AK_COOKER = 70;
  SCRIPT_CB_COOKER = 71;

  // Magic
  SCRIPT_ALCHER     = 80;
  SCRIPT_TELEPORTER = 81;

  // Money Making
  SCRIPT_VE_SOFTENER = 100;
  SCRIPT_GE_SOFTENER = 101;
  SCRIPT_EV_SOFTENER = 102;
  SCRIPT_FW_SOFTENER = 103;
  SCRIPT_VE_FILLER   = 104;
  SCRIPT_FW_FILLER   = 105;
  SCRIPT_GE_FILLER   = 106;

  // Runecrafting
  SCRIPT_RC_AIR   = 120;
  SCRIPT_RC_WATER = 121;
  SCRIPT_RC_EARTH = 122;
  SCRIPT_RC_FIRE  = 123;
  SCRIPT_RC_BODY  = 124;
  SCRIPT_RC_MIND  = 125;

  SCRIPT_ARRAY_LENGTH = 127; // Change to the highest script constant

(*
Extras Constants
~~~~~~~~~~~~~~~~

Constants used in MSI Extras.  These do not represent an index of a global
array, but specify certain settings when a scripter is declaring and extra for
MSI.
*)
const
  EXTRA_BETA       = 'BETA';
  EXTRA_ALPHA      = 'ALPHA';
  EXTRA_PRERELEASE = 'PRE-RELEASE';

  EXTRA_CONTINUE   = 1;
  EXTRA_EXIT       = -1;

(*
Pointer Constants
~~~~~~~~~~~~~~~~~

The Pointer constants are used primarily with Extras where the scripter can set
which procedures to call the extra in place of or in addition to.  These are
also used for declaring an extra.

Example:

.. code-block:: pascal

  MSI_Pointers[MSI_OnDebugCall] := @Coh3n_Debug; // Where Coh3n_Debug would be in an extra I wrote
*)
const
  MSI_OnResetRemoteCall = 0;
  MSI_OnGetSkillLevels  = 1;

  POINTER_ARRAY_LENGTH  = 2;

(*
Path Constants
~~~~~~~~~~~~~~

These constants represent the different paths to files accessed by MSI, such as
the saved player's information, the debug/report files, and the settings file.
*)
const
  PATH_PLAYER       = IncludePath + 'MSI\Player.txt';        // Path for all the player information
  PATH_REPORT       = IncludePath + 'MSI\Progress Reports\'; // Path for progress report
  PATH_DEBUG        = IncludePath + 'MSI\Debug Logs\';       // Path for debug
  PATH_SETTINGS     = IncludePath + 'MSI\Settings.txt';      // Path for script settings
  PATH_FORM_BITMAPS = IncludePath + 'MSI\MSI\Form\Bitmaps\'; // Path to all the form images
  PATH_EXTRAS       = IncludePath + 'MSI\MSI\Extras\';       // Path to all the extras

(*
Location Constants
~~~~~~~~~~~~~~~~~~

The Location constants represent the index of the MSI_Locations array that
stores all the location information for that particular location.  To access all
the location information for Varrock East Bank, for example, you would do
something like:

Example:

.. code-block:: pascal

  function GetVEBankInfo(): TScript;
  begin
    Result := MSI_Locations[LOC_VE_BANK];
  end;
*)
const
  // Undefined
  LOC_POWER_SKILL = 0;
  LOC_LOST        = 1;

  // Varrock
    // East
    LOC_VE_OAKS     = 11;
    LOC_VE_BANK     = 12;
    LOC_VE_MINE     = 13;
    LOC_VE_FOUNTAIN = 14;

    // West
    LOC_VW_BANK  = 16;
    LOC_VW_MINE  = 17;

    // Grand Exchange
    LOC_GE_BANK  = 20;
    LOC_GE_YEWS  = 21;
    LOC_GE_OAKS  = 22;
    LOC_GE_FOUNTAIN = 23;

  // Draynor
  LOC_DB_BANK    = 30;
  LOC_DB_WILLOWS = 31;
  LOC_DB_TREES   = 32;
  LOC_DB_OAKS    = 33;
  LOC_DB_FISH    = 34;
  LOC_DB_CLAY    = 35;
  LOC_DB_YEWS    = 36;

  // Rimmington
  LOC_RM_YEWS    = 40;
  LOC_RM_MINE    = 41;
  LOC_RM_WILLOWS = 42;

  // Falador
  LOC_FE_BANK    = 50;
  LOC_FW_BANK    = 51;
  LOC_FW_MINE    = 52;
  LOC_FW_PUMP    = 53;

  // Port Sarim
  LOC_PS_WILLOWS = 60;
  LOC_PS_YEWS    = 61;
  LOC_PS_DBOX    = 62;

  // Lumbridge
  LOC_LSW_MINE   = 70;
  LOC_LSE_MINE   = 71;
  LOC_LB_SPAWN   = 72;

  // Edgeville
  LOC_EV_BANK    = 80;
  LOC_EV_YEWS    = 81;
  LOC_EV_WELL    = 82;

  // Barbarian Village
  LOC_BBV_MINE   = 90;
  LOC_BBV_FISH   = 91;

  // Seers Village
  LOC_SV_MAGICS  = 100;
  LOC_SV_BANK    = 101;
  LOC_SV_MAPLES  = 102;
  LOC_SV_YEWS    = 103;
  LOC_SV_OAKS    = 104;
  LOC_SV_TREES   = 105;

  // Guilds
  LOC_GUILD_MINE = 110;
  LOC_CG_MINE    = 111;
  LOC_FG_BANK    = 112;
  LOC_FG_FISH    = 113;
  // Al-Kharid
  LOC_AK_BANK   = 120;
  LOC_AK_RANGE  = 121;
  LOC_AK_MINE   = 122;

  // Karamja
  LOC_KJ_STILES = 130;
  LOC_KJ_FISH   = 131;

  // Catherby
  LOC_CB_BANK  = 140;
  LOC_CB_FISH  = 141;
  LOC_CB_RANGE = 142;

  // Alters
  LOC_ALTAR_AIR   = 150;
  LOC_ALTAR_EARTH = 151;
  LOC_ALTAR_WATER = 152;
  LOC_ALTAR_FIRE  = 153;
  LOC_ALTAR_MIND  = 154;
  LOC_ALTAR_BODY  = 155;

  // Yanille
  Loc_Y_Mine = 156;
  Loc_Y_Bank = 157;

  // Fishing Colony(Piscatoris)
  LOC_FC_BANK = 158;
  LOC_FC_FISH = 159;

  LOC_ARRAY_LENGTH = 159; // Change to the highest location constant

(*
Requirement Constants
~~~~~~~~~~~~~~~~~~~~~

These constants represent the skill level required to use a particular tool.
For example, to use a Steel Hatchet or Pickaxe, the player needs a level of 6 in
Mining or Woodcutting.
*)
const
  // Hatchets and pickaxes
  REQ_TOOL_BRONZE  = 1;
  REQ_TOOL_IRON    = 1;
  REQ_TOOL_STEEL   = 6;
  REQ_TOOL_MITHRIL = 21;
  REQ_TOOL_ADAMANT = 31;
  REQ_TOOL_RUNE    = 41;
  REQ_TOOL_DRAGON  = 61;

  REQ_MAX_LEVEL = 99;

(*
Item Constants
~~~~~~~~~~~~~~

The Item constants represent the index of the MSI_Items array that stores all
the item information for that particular item.  To access all the item
information for Willow Logs, for example, you would do something like:

Example:

.. code-block:: pascal

  function GetWillowLogsInfo(): TItem;
  begin
    Result := MSI_Items[LOGS_WILLOW];
  end;
*)
const
  PICKAXE_BRONZE  = 10;
  PICKAXE_IRON    = 11;
  PICKAXE_STEEL   = 12;
  PICKAXE_MITHRIL = 13;
  PICKAXE_ADAMANT = 14;
  PICKAXE_RUNE    = 15;
  PICKAXE_DRAGON  = 16;

  HATCHET_BRONZE  = 20;
  HATCHET_IRON    = 21;
  HATCHET_STEEL   = 22;
  HATCHET_MITHRIL = 23;
  HATCHET_ADAMANT = 24;
  HATCHET_RUNE    = 25;
  HATCHET_DRAGON  = 26;

  LOGS_NORMAL     = 30;
  LOGS_OAK        = 31;
  LOGS_WILLOW     = 32;
  LOGS_MAPLE      = 33;
  LOGS_YEW        = 34;
  LOGS_MAGIC      = 35;

  ORE_CLAY        = 40;
  ORE_COPPER      = 41;
  ORE_TIN         = 42;
  ORE_IRON        = 43;
  ORE_SILVER      = 44;
  ORE_COAL        = 45;
  ORE_GOLD        = 46;
  ORE_MITHRIL     = 47;
  ORE_ADAMANTITE  = 48;
  ORE_RUNITE      = 49;

  FISH_SMALLNET       = 60;
  FISH_CAGE_CRAYFISH  = 61;
  FISH_ROD_BAIT       = 62;
  FISH_BAIT           = 63;
  FISH_ROD_FLY        = 64;
  FISH_HARPOON        = 65;
  FISH_HARPOON_BARB   = 66;
  FISH_POT_LOBSTER    = 67;

  FISH_RAW_SHRIMP     = 70;
  FISH_RAW_CRAYFISH   = 71;
  FISH_RAW_SARDINE    = 72;
  FISH_RAW_ANCHOVIE   = 73;
  FISH_RAW_HERRING    = 74;
  FISH_RAW_TROUT      = 75;
  FISH_RAW_PIKE       = 76;
  FISH_RAW_SALMON     = 77;
  FISH_RAW_TUNA       = 78;
  FISH_RAW_LOBSTER    = 79;
  FISH_RAW_SWORDFISH  = 80;
  FISH_RAW_MONKFISH   = 81;
  FISH_RAW_SHARK      = 82;

  FISH_COOKED_SHRIMP    = 100;
  FISH_COOKED_CRAYFISH  = 101;
  FISH_COOKED_SARDINE   = 102;
  FISH_COOKED_ANCHOVIE  = 103;
  FISH_COOKED_HERRING   = 104;
  FISH_COOKED_TROUT     = 105;
  FISH_COOKED_PIKE      = 106;
  FISH_COOKED_SALMON    = 107;
  FISH_COOKED_TUNA      = 108;
  FISH_COOKED_LOBSTER   = 109;
  FISH_COOKED_SWORDFISH = 110;
  FISH_COOKED_MONKFISH  = 111;
  FISH_COOKED_SHARK     = 112;

  GEM_UNCUT_SAPPHIRE = 120;
  GEM_UNCUT_EMERALD  = 121;
  GEM_UNCUT_RUBY     = 122;
  GEM_UNCUT_DIAMOND  = 123;

  MISC_BIRD_NEST = 130;
  MISC_FEATHER   = 131;

  STAFF_AIR   = 150;
  STAFF_WATER = 151;
  STAFF_EARTH = 152;
  STAFF_FIRE  = 153;

  // These constants have to match the rune constants in SRL's magic.simba
  MSI_RUNE_AIR    = 160; // Has 'MSI_' because there are other rune constants in SRL
  MSI_RUNE_BODY   = 161;
  MSI_RUNE_MIND   = 162;
  MSI_RUNE_EARTH  = 163;
  MSI_RUNE_FIRE   = 164;
  MSI_RUNE_WATER  = 165;
  MSI_RUNE_CHAOS  = 166;
  MSI_RUNE_LAW    = 167;
  MSI_RUNE_COSMIC = 168;
  MSI_RUNE_DEATH  = 169;
  MSI_RUNE_NATURE = 170;
  MSI_RUNE_BLOOD  = 171;
  MSI_RUNE_SOUL   = 172;
  MSI_RUNE_ASTRAL = 173;
  MSI_RUNE_ESSENCE = 174;
  MSI_PURE_ESSENCE = 175;

  CLAY_SOFT     = 180;
  VIAL_EMPTY    = 181;
  VIAL_WATER    = 182;
  JUG_EMPTY     = 183;
  JUG_WATER     = 184;
  BOWL_EMPTY    = 185;
  BOWL_WATER    = 186;
  BUCKET_EMPTY  = 187;
  BUCKET_WATER  = 188;

  TIARA_AIR   = 210;
  TIARA_BODY  = 211;
  TIARA_MIND  = 212;
  TIARA_EARTH = 213;
  TIARA_FIRE  = 214;
  TIARA_WATER = 215;

  DWARVEN_ARMY_AXE = 216;

  COAL_BAG = 217;

  ITEM_ARRAY_LENGTH = 217; // Change to the highest item constant

(*
Object Constants
~~~~~~~~~~~~~~~~

The Object constants represent the index of the MSI_Objects array that stores
all the object information for that particular object.  Objects refer to
anything that is to be found on the main screen of the Runescape window.  To
access all the item information for a Willow Tree, for example, you would do
something like:

Example:

.. code-block:: pascal

  function GetWillowTreeInfo(): TMSObject;
  begin
    Result := MSI_Objects[TREE_WILLOW];
  end;
*)
const
  // Trees
  TREE_DEAD       = 8;
  TREE_NORMAL     = 9;
  TREE_NORMAL_NEW = 10;
  TREE_OAK        = 11;
  TREE_OAK_NEW    = 12;
  TREE_WILLOW     = 13;
  TREE_WILLOW_NEW = 14;
  TREE_MAPLE      = 15;
  TREE_MAPLE_NEW  = 16;
  TREE_YEW        = 17;
  TREE_YEW_NEW    = 18;
  TREE_MAGIC      = 19;

  // Rocks
  ROCK_CLAY       = 20;
  ROCK_TIN        = 21;
  ROCK_COPPER     = 22;
  ROCK_IRON       = 23;
  ROCK_SILVER     = 24;
  ROCK_COAL       = 25;
  ROCK_GOLD       = 26;
  ROCK_MITHRIL    = 27;
  ROCK_ADAMANTITE = 28;
  ROCK_RUNITE     = 29;

  // Banks; includes the 'MSI_' because there are bank constants in SRL's Bank.scar
  MSI_BANK_VE = 30;
  MSI_BANK_VW = 31;
  MSI_BANK_DB = 32;
  MSI_BANK_GE = 33;
  MSI_BANK_FE = 34;
  MSI_BANK_EV = 35;
  MSI_BANK_SV = 36;
  MSI_BANK_AK = 37;
  MSI_BANK_CB = 38;
  MSI_BANK_FW = 39;
  MSI_BANK_FG = 40;
  MSI_BANK_Y  = 41;

  DBOX_PS = 45;

  // Fishing spots
  FISHSPOT_NET     = 50;
  FISHSPOT_BAIT    = 51;
  FISHSPOT_LURE    = 52;
  FISHSPOT_CAGE    = 53;
  FISHSPOT_HARPOON = 54;
  FISHSPOT_HARPOON_SHARK = 55;
  FISHSPOT_NET_MONKFISH = 56;

  // Cooking spots
  COOKSPOT_AK_RANGE = 60;
  COOKSPOT_CB_RANGE = 61;

  // Obstacles
  LADDER_MG_DOWN    = 70;
  LADDER_MG_UP      = 71;
  WALL_FW           = 72;
  DOOR_NORMAL       = 73;

  // NPCs
  NPC_STILES        = 93;
  NPC_ARNOLD        = 94;

  // Misc Objects
  OBJ_BIRD_NEST       = 100;
  BIRD_NEST_CBMESSAGE = 'nest falls out of';

  // Water Sources
  FOUNTAIN_VE = 110;
  FOUNTAIN_GE = 111;
  WELL_EV     = 112;
  PUMP_FW     = 113;

  // Furnaces
  FURNACE_AK = 120;

  // Mysterious Ruins
  RUINS_AIR    = 130;
  RUINS_EARTH  = 131;
  RUINS_WATER  = 132;
  RUINS_MIND   = 133;
  RUINS_FIRE   = 134;
  RUINS_BODY   = 135;

  ALTAR_RUNECRAFTING = 137;

  // Portals
  PORTAL_AIR   = 150;
  PORTAL_EARTH = 151;
  PORTAL_WATER = 152;
  PORTAL_MIND  = 153;
  PORTAL_FIRE  = 154;
  PORTAL_BODY  = 155;

  OBJECT_HIGH = 155; // Change to the highest object constant

(*
Obstacle Constants
~~~~~~~~~~~~~~~~~~

The Obstacle constants represent the index of the MSI_Obstacles array that
stores all the object information for that particular obstacle. It stores
information for obstacles like doors and ladders.

Example:

.. code-block:: pascal

  function GetGuildLadder(): TObstacle;
  begin
    Result := MSI_GetObstacle(OBS_MG_LADDER_DOWN);
  end;
*)
const
  // Represents TPath's "Obstacles" array elements
  OBS_LOC_TO   = 0;
  OBS_LOC_FROM = 1;

  OBS_LADDER_MG_DOWN = 10;
  OBS_LADDER_MG_UP   = 11;
  OBS_WALL_FW        = 20;
  OBS_DOOR_CG_IN     = 30;
  OBS_DOOR_CG_OUT    = 31;

  // Runcrafting
  OBS_RUINS_AIR   = 50;
  OBS_RUINS_EARTH = 51;
  OBS_RUINS_WATER = 52;
  OBS_RUINS_MIND  = 53;
  OBS_RUINS_FIRE  = 54;
  OBS_RUINS_BODY  = 55;

  OBS_PORTAL_AIR   = 71;
  OBS_PORTAL_EARTH = 72;
  OBS_PORTAL_WATER = 73;
  OBS_PORTAL_MIND  = 74;
  OBS_PORTAL_FIRE  = 75;
  OBS_PORTAL_BODY  = 76;

(*
Spells Constants
~~~~~~~~~~~~~~~~

The Spell constants work the same as the items/objects/obstacles/etc - they
represent the index of a global array.

Example:

.. code-block:: pascal

  function GetWindStrike(): TSpell;
  begin
    Result := MSI_Spells[SPELL_WIND_STRIKE];
  end;
*)
const
  ALCH_COIN_MESSAGE    = 'oins are';

  SPELL_WIND_STRIKE    = 0;
  SPELL_WIND_BOLT      = 1;
  SPELL_WIND_BLAST     = 2;
  SPELL_WIND_WAVE      = 3;

  SPELL_WATER_STRIKE   = 4;
  SPELL_WATER_BOLT     = 5;
  SPELL_WATER_BLAST    = 6;
  SPELL_WATER_WAVE     = 7;

  SPELL_EARTH_STRIKE   = 8;
  SPELL_EARTH_BOLT     = 9;
  SPELL_EARTH_BLAST    = 10;
  SPELL_EARTH_WAVE     = 11;

  SPELL_FIRE_STRIKE    = 12;
  SPELL_FIRE_BOLT      = 13;
  SPELL_FIRE_BLAST     = 14;
  SPELL_FIRE_WAVE      = 15;

  SPELL_CONFUSE        = 16;
  SPELL_WEAKEN         = 17;
  SPELL_CURSE          = 18;
  SPELL_BIND           = 19;

  SPELL_TELE_HOME      = 20;
  SPELL_TELE_VARROCK   = 21;
  SPELL_TELE_LUMBRIDGE = 22;
  SPELL_TELE_FALADOR   = 23;
  SPELL_TELE_HOUSE     = 24;
  SPELL_TELE_CAMELOT   = 25;

  SPELL_ALCH_LOW       = 26;
  SPELL_ALCH_HIGH      = 27;

  SPELL_TELEGRAB       = 28;
  SPELL_SUPERHEAT      = 29;

  SPELL_ARRAY_LENGTH   = 29;

(*
Animations Constants
~~~~~~~~~~~~~~~~~~~~

The Animation constants work the same as the items/objects/obstacles/etc - they
represent the index of a global array.

Example:

.. code-block:: pascal

  function GetHighAlchAnimation(): TAnimation;
  begin
    Result := MSI_GetAnimation(ANIM_ALCH_HIGH);
  end;
*)
const
  ANIM_IDLE         = 0;
  ANIM_ALCH_LOW     = 10;
  ANIM_ALCH_HIGH    = 11;
  ANIM_CHOPPING     = 12;
  ANIM_CHOPPING_NEW = 13;
  ANIM_TELE         = 14;

(*
Material Constants
~~~~~~~~~~~~~~~~~~

The Material constants work the same as the items/objects/obstacles/etc - they
represent the index of a global array.

Example:

.. code-block:: pascal

  function GetShrimpMaterials(): TMaterial;
  begin
    Result := MSI_Materials[MATERIAL_SHRIMP];
  end;
*)
const
  // Fish for cooking
  MATERIAL_SHRIMP      = 0;
  MATERIAL_CRAYFISH    = 1;
  MATERIAL_SARDINE     = 2;
  MATERIAL_HERRING     = 3;
  MATERIAL_ANCHOVIE    = 4;
  MATERIAL_TROUT       = 5;
  MATERIAL_PIKE        = 6;
  MATERIAL_SALMON      = 7;
  MATERIAL_TUNA        = 8;
  MATERIAL_LOBSTER     = 9;
  MATERIAL_SWORDFISH   = 10;
  MATERIAL_MONKFISH    = 11;
  MATERIAL_SHARK       = 12;

  // Money making
  MATERIAL_CLAY        = 20;
  MATERIAL_VIAL        = 21;
  MATERIAL_JUG         = 22;
  MATERIAL_BOWL        = 23;
  MATERIAL_BUCKET      = 24;

  //Runecrafting
  MATERIAL_ESSENCE_RUNE = 40;
  MATERIAL_ESSENCE_PURE = 41;

  MATERIAL_LENGTH = 41;

(*
Proggy Constants
~~~~~~~~~~~~~~~~

Used in MSI_AddToProggy in Debug.simba to determine what to add to the
progress report.
*)
const
  PROG_ADD_EXP   = 0;
  PROG_ADD_ITEMS = 1;
  PROG_ADD_LOADS = 2;
  PROG_ADD_CASTS = 3;

(*
Setup Constants
~~~~~~~~~~~~~~~

Represents the indexes of MSI_Settings which are set by the user. Used just
like the other MSI global arrays.
*)
const
  // Booleans
  SETUP_DEBUG_SMART   = 10;
  SETUP_SAVE_DEBUG    = 11;
  SETUP_SAVE_REPORT   = 12;
  SETUP_HUMAN_BREAK   = 13;
  SETUP_SWITCH_WORLDS = 14;
  SETUP_PRINT_REPORT  = 15;
  SETUP_QC_LEVELUP    = 16;
  SETUP_RANDOM_NP     = 17;
  SETUP_DEATH_WALK    = 18;

  // Integers
  SETUP_BREAK_TIME    = 20;
  SETUP_DEBUG_LEVEL   = 21;
  SETUP_ANTIBAN_WAIT  = 22;
  SETUP_RANDOMS_WAIT  = 23;
  SETUP_MAX_PLAYERS   = 24;

  // Strings
  SETUP_STATS_ID      = 30;
  SETUP_STATS_PASS    = 31;

  SETUP_ARRAY_LENGTH  = 31;

{==============================================================================\
|                                  Types                                       |
\==============================================================================}

(*
TMSObject
~~~~~~~~~

The type that holds all the attributes of any main screen objects used
throughout MSI scripts.
*)
type
  TMSObject = record
    X, Y             : Integer;
    Name             : string;        // The object's name (doesn''t have to be the same as in-game)
    Constant         : Integer;
    Uptexts          : TStringArray;
    Options          : TStringArray;
    Exp              : Extended;      // Experienced gained from object
    Level            : Integer;       // The skill level required
    Colors           : TIntegerArray;
    FindAllColors    : Boolean;       // Set to true if all the colors need to be found
    Tol              : Integer;
    Hue              : array of Extended; //Should be one for every color.
    Sat              : array of Extended;
    W, H             : Integer;       // Width and Height of the object
    Accuracy         : Integer;       // Min pixels to be found in each TPA
    SearchArea       : TBox;          // Box to search for object. Carries the Values of MSBox by default.
    ExcludeSelf      : Boolean;       // Exclude pixels in a box around the player
    RightClickOnly   : Boolean;
    WaitToMove       : Boolean;       // When clicked, wait till we have stopped moving? Calls Flag;
    MultiClick       : Boolean;       // Milti-click the object like a human would
    Track            : Boolean;       // When clicked, track the object while the player moves? Calls MSI_TrackObject;
    MaxTime          : Integer;       // Max time (in ms) to wait for the object to disappear
    AssociatedItems  : TIntegerArray; // The items that can be gained from interacting with object
  end;

  TMSObjectArray = array of TMSObject;

(*
TItem
~~~~~

The type that holds all the attributes of any item used in the inventory
or bank throughout MSI scripts.
*)
type
  TItem = record
    Name      : string;
    StatsName : string;
    UpText    : TStringArray;
    InvSlot   : Integer;
    Stackable : Boolean;
    EquipLevel: Integer;
    DTM       : Integer;
  end;

  TItemArray = array of TItem;

(*
TMaterial
~~~~~~~~~

The type that holds all the attributes of any materials used for a skill.
*)
type
  TMaterial = record
    Name        : string;
    Supplies    : T2DIntegerArray;
    Produces    : TIntegerArray;
    MemberOnly  : Boolean;
    Level       : Integer;
  end;

  TMaterialArray = array of TMaterial;

(*
TBank
~~~~~

Used in the banking functions to determine the type of bank.  Also used when
declaring a TScript record.
*)
type
  TBank = (Bank, DBox, NoBank, Drop, NPC);

(*
TMouseOption
~~~~~~~~~~~~

Used to tell the object routines which type of mouse action to perform.
*)
type
  TMouseOption = (moRight, moLeft, moMove, moNothing);

(*
TStaffType
~~~~~~~~~~

Used when setting up magic scripts to determine which staff to use.
*)
type
  TStaffType = (LeastCasts, MostCasts, Cheapest);

(*
TPath
~~~~~

Stores all the different path information. Used when declaring a TScript record.
*)
type
  TPath = record
    Name       : String;
    StartLoc   : Integer;
    EndLoc     : Integer;
    MaxDist    : Integer; // the maximum distance from any point in the path to blind walk to the path
    SPSPath    : T2DPointArray;
    SPSSurfaces: TIntegerArray; // has to be the length of TPath.SPSPath
    SPSAreas   : array of TStringArray; // 1st is length of TPath.SPSSurfaces, 2nd are the areas for each surface
    Obstacles  : array[0..2] of TIntegerArray;
  end;

(*
TScriptSetup
~~~~~~~~~~~~

Used to make it easier for users to setup and for scripters to follow the code
around the include.
*)
type
  TScriptSetup = record
    Name : Integer;

    Loads    : Integer; // Total loads to do for a specific script
    Time     : Integer; // Total time for a specific script
    MaxLevel : Integer; // The maximum skill level for that script

    // Woodcutting, Mining, and Fishing
    Rocks      : TIntegerArray;
    Trees      : TIntegerArray;
    FishSpots  : TIntegerArray;
    Priority   : TIntegerArray;
    Materials  : TIntegerArray;
    DontDrop   : TIntegerArray; // The items the user doesn't want dropped/banked
    Exceptions : TIntegerArray; // The inventory slots the user doesn't want dropped/banked
	  CoalBag    : Boolean; // Property for using the Coal bag when mining

    // Magic
    Spells    : TIntegerArray;
    Staffs    : TIntegerArray;
    StaffType : TStaffType;
    AlchSlots : TIntegerArray;

    // Cooking
    CookingSpot : TIntegerArray;

    // Miscellaneous
    Objects : TIntegerArray;

    // Runecrafting
    Tiara : Integer;

    // Not setup by the user
    Items    : array of TIntegerArray;
    MaxCasts : TIntegerArray; // Maximum casts for each spell (calculated in MSI_SetupMagic)
  end;

  TScriptSetupArray = array of TScriptSetup;

(*
TScript
~~~~~~~

Stores all the necessary script information for ease of adding new scripts.
Script declarations can be found in Scripts.simba.
*)
type
  TScript = record
    Name        : string;
    Constant    : Integer;
    SkillName   : string;
    SkillConst  : Integer;
    MaxTime     : Integer; // the maximum time to do one load in minutes (default is 60)
    BankType    : TBank;
    GetMaterials: Boolean;
    WhichBank   : Integer;
    ClickClosest: Boolean;
    AdjustCamera: Boolean;
    AutoObjects : function: Boolean;
    BankObjects : function: Boolean;
    PlayerSetup : function: Boolean;
    Defaults    : TScriptSetup;
    PathInfo    : TPath;
  end;

  TScriptArray = array of TScript;

(*
TPointer
~~~~~~~~

Used to call different functions in place or at the same time as MSI functions.
Mainly used in MSI extras.
*)
type
  TPointer = record
    Constant    : Integer;
    FunctionCall: string;
    UsedBy      : Integer;
  end;

  TPointerArray = array of TPointer;

(*
TExtra
~~~~~~

Used for declaring new extras. Stores all the necessary information needed to
properly implement an extra.
*)
type
  TExtra = record
    Name        : string;
    Author      : string;
    Version     : string;
    Enabled     : Boolean;
    Settings    : TVariantArray;
    Setup       : function: Boolean;
    PointerCount: Integer;
    Constant    : Integer;
    Pointers    : TPointerArray;
  end;

  TExtraArray = array of TExtra;

(*
TProggy
~~~~~~~

Stores the necessary information for a player's progress report; used in
the TPlayerInfo type only.
*)
type
  TProggy = record
    LoadsDone    : Integer;
    PlayerTime   : Integer;

    ScriptTimes  : TIntegerArray; // Time for each script
    SkillLevels  : TIntegerArray; // Skill level for each script
    GainedExps   : TIntegerArray; // Exp gained for each script
    ScriptCounts : TIntegerArray; // Counts for each script (i.e. loads, casts, kills)

    FalseReason  : string;

               // Script | Object | Multiple per object
    Items       : array of array of TIntegerArray;  // Logs, drop items, ores, fish, etc.
    ItemAmounts : array of array of TIntegerArray;
    Casts       : array of TIntegerArray; // Number of casts per spell
  end;

  TProggyArray = array of TProggy;

(*
TPlayerInfo
~~~~~~~~~~~

MSI's custom player record; used to setup each player. TUser can be found in
SRL (Players.scar).
*)
type
  TPlayerInfo = record
    Name         : string;
    Pass         : string;
    Nick         : string;
    Pin          : string;
    Active       : Boolean;
    Member       : Boolean;
    Location     : Integer;
    TotalLoads   : Integer;
    BreakLoads   : Integer;
    TotalTime    : Integer;
    BreakTime    : Integer;
    CurrentPoint : Integer;
    Scripts      : TScriptSetupArray;

    // Not setup by the user
    ReportInfo : TProggy;

    // Pointers
    GetObjects: function(): TIntegerArray;
    GetScript : function(): TScript;
  end;

  TPlayerInfoArray = array of TPlayerInfo;

(*
TLocation
~~~~~~~~~

A record that stores all the properties of the different MSI player locations.
Used in several areas throughout the include such as reloacting, player setup,
and confirming player locations.
*)
type
  TSubLoc = record
    name: string;
    spsBox: TBox;
    compass: variant;
    camera: integer;
    objects: TIntegerArray;
  end;
  TSubLocArray = array of TSubLoc;

  TLocation = record
    name: string;
    constant: integer;
    atBank: boolean;
    subLocs: TSubLocArray; // is dynamic (elements are shifted during runtime)
    _subLocs: TSubLocArray; // used to store a static TSubLocArray to use in walking
    deathPath: TPath;
  end;
  TLocationArray = array of TLocation;

(*
TObstacle
~~~~~~~~~

A record that stores all the necessary information for the many obstacles
around Runescape.
*)
type
  TObstacle = record
    Name       : string;
    Constant   : Integer;       // Obstacle constant
    MirText    : TStringArray;  // Text that may appear in the chat box
    ObjConst   : Integer;       // Object constant
    ObjMir     : Integer;       // Object's mirror constant
    ObjMirArea : TBox;          // Obstacle's mirror search area
    MirAction  : TMouseOption;  // What to do if the object is found on the MS
    Camera     : TVariantArray; // Changes the camera angle and height
    EndTiles   : TPointArray;   // Possible tiles the player will end up on
  end;

  TObstacleArray = array of TObstacle;

(*
TAnimation
~~~~~~~~~~

A record that stores all the necessary information for the different
animations used for MSI.  See
`Dev Tools/aid_TAnimation.simba <https://github.com/SRL/MSI/raw/master/Dev Tools/aid_TAnimation.simba>`_
for an aiding program for making a TAnimation record.
*)
type
  TAnimation = record
    Name          : string;
    MinPixelShift : Integer; // Minimum pixel shift for animation
    MaxPixelShift : Integer; // Maximum pixel shift
    PixelBox      : TBox;    // Box to check for pixel shift
    Interval      : Integer; // How long to check for pixel shift
    MaxTime       : Integer; // Gets the average pixel shift from Interval over MaxTime
    WaitTime      : Integer; // How long to wait for animation in ms
  end;

  TAnimationArray = array of TAnimation;

(*
TMagicSpell
~~~~~~~~~~~

A type that stores the information for spells used in MSI's magic scripts.
*)
type
  TMagicSpell = record
    Name         : string;
    StatsName    : string;
    Constant     : Integer;
    Level        : Integer;
    Experience   : Integer;
    Staffs       : TIntegerArray;
    FreeBox      : TBox;
    MemberBox    : TBox;
    AutoCast     : Boolean;
    AnimConst    : Integer;
    Runes        : TIntegerArray;
    RuneAmounts  : TIntegerArray;
  end;

  TMagicSpellArray = array of TMagicSpell;

{==============================================================================\
|                                 Variables                                    |
\==============================================================================}

// Miscellaneous variables used throughout the include
var
  CurrentScript    : Integer;
  CurrDebugLevel   : Integer;
  CurrentExtra     : Integer;
  CurrentPointer   : Integer;
  ScriptStart      : string;
  NextAntiban      : Integer;
  NextRandCheck    : Integer;
  DebugFile        : Integer;

// Arrays that store all the necessary "go-to" information for MSI
var
  MSI_Settings  : array[0..SETUP_ARRAY_LENGTH] of variant;
  MSI_Players   : TPlayerInfoArray;
  MSI_Items     : array[0..ITEM_ARRAY_LENGTH] of TItem;
  MSI_Locations : array[0..LOC_ARRAY_LENGTH] of TLocation;
  MSI_Scripts   : array[0..SCRIPT_ARRAY_LENGTH] of TScript;
  MSI_Extras    : TExtraArray;
  MSI_Pointers  : array[0..POINTER_ARRAY_LENGTH] of TPointer;
  MSI_Spells    : array[0..SPELL_ARRAY_LENGTH] of TMagicSpell;

