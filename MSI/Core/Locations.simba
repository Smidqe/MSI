(*
Locations
=========

The Locations file stores all the TLocation records used in MSI.

The source for Locations.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Locations.simba>`_.

*)

(*
MSI_LoadLocation
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_LoadLocation(Which: Integer): Boolean;

Loads the location 'Which' (sets 'Which' in the MSI_Locations global array).
This procedure should only be called in MSI_LoadAllLocations. 'Which' represents
the location constants MSI uses, which can be found in Globals.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 10 October 2011 by Coh3n

Example:

.. code-block:: pascal

  for i := 0 to High(MSI_Locations) do
    MSI_LoadLocation(i);
*)
function MSI_LoadLocation(loc: integer): boolean;
var
  i: integer;
begin
   case loc of
     LOC_POWER_SKILL:
       with MSI_Locations[loc] do
       begin
         name := 'Powerskilling';
         atBank := false;
       end;

     LOC_LOST:
       with MSI_Locations[loc] do
       begin
         name := 'Lost';
         atBank := false;
       end;

     LOC_VE_OAKS:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock East Oaks';
         atBank := false;

         setLength(subLocs, 3);
         with subLocs[0] do
         begin
           name := 'Varrock East Oak North';
           spsBox := intToBox(4958, 2955, 4970, 2963);
           compass := randomRange(75, 360);
         end;

         with subLocs[1] do
         begin
           name := 'Varrock East Oak Central';
           spsBox := intToBox(4954, 2976, 4964, 2992);
           compass := randomRange(260, 315);
         end;

         with subLocs[2] do
         begin
           name := 'Varrock East Oak South';
           spsBox := intToBox(4946, 2994, 4957, 3005);
           compass := randomRange(165, 195);
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_VE_OAKS].Defaults.Trees;
         end;
       end;

     LOC_VE_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock East Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Varrock East Bank';
           spsBox := intToBox(4836, 2965, 4866, 2978);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_VE_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_VE_BANK;

           spsPath := [
             TPointArray([Point(4726, 3786), Point(4786, 3759),
                          Point(4853, 3756), Point(4792, 3545),
                          Point(4791, 3433), Point(5024, 3224),
                          Point(5010, 3118), Point(4972, 2938),
                          Point(4852, 2937), Point(4851, 2970)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '12_9', '11_8', '12_8', '12_7'])
           ];
         end;
       end;

     LOC_VE_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock East Mine';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Varrock East Mine';
           spsBox := intToBox(4962, 3175, 4999, 3212);
           objects := MSI_Scripts[SCRIPT_VE_MINER].Defaults.Rocks;
         end;
       end;

     LOC_VE_FOUNTAIN:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock East Fountain';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Varrock East Fountain';
           spsBox := intToBox(4782, 2902, 4804, 2923);
           objects := [FOUNTAIN_VE];
         end;
       end;

     LOC_GE_FOUNTAIN:
       with MSI_Locations[loc] do
       begin
         name := 'Grand Exchange Fountain';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Grand Exchange Fountain';
           spsBox := intToBox(4495, 2680, 4515, 2699);
           objects := [FOUNTAIN_GE];
         end;
       end;

     LOC_VW_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock West Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Varrock West Bank';
           spsBox := intToBox(4560, 2870, 4600, 2915);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_VW_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_VW_BANK;

           spsPath := [
             TPointArray([Point(4726, 3790), Point(4782, 3762),
                          Point(4872, 3747), Point(4793, 3528),
                          Point(4796, 3347), Point(4682, 3138),
                          Point(4675, 2943), Point(4583, 2932),
                          Point(4581, 2902)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '12_9', '11_8', '11_7'])
           ];
         end;
       end;

     LOC_VW_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Varrock West Mine';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Varrock West Mine North';
           spsBox := intToBox(4562, 3142, 4575, 3176);
           objects := [ROCK_TIN, ROCK_CLAY, ROCK_IRON];
         end;

         with subLocs[1] do
         begin
           name := 'Varrock West Mine South';
           spsBox := intToBox(3528, 3176, 4554, 3195);
           objects := [ROCK_TIN, ROCK_SILVER, ROCK_IRON];
         end;
       end;

     LOC_GE_OAKS:
       with MSI_Locations[loc] do
       begin
         name := 'Grand Exchange Oaks';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Grand Exchange Oaks';
           spsBox := intToBox(4596, 2793, 4615, 2821);
           compass := randomRange(260, 290);
           subLocs[i].camera := SRL_ANGLE_LOW;
           objects := MSI_Scripts[SCRIPT_GE_OAKS].Defaults.Trees;
         end;
       end;

     LOC_GE_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Grand Exchange Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Grand Exchange Bank';
           spsBox := intToBox(4540, 2719, 4554, 2731);
           compass := randomRange(85, 95);
           subLocs[i].camera := SRL_ANGLE_LOW;
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_GE_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_GE_BANK;

           spsPath := [
             TPointArray([Point(4725, 3787), Point(4779, 3761),
                          Point(4870, 3750), Point(4794, 3537),
                          Point(4796, 3352), Point(4682, 3131),
                          Point(4680, 2922), Point(4498, 2809),
                          Point(4495, 2770), Point(4548, 2725)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '12_9', '11_8', '11_7', '11_6'])
           ];
         end;
       end;

     LOC_GE_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Grand Exchange Yews';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Grand Exchange Yews West';
           spsBox := intToBox(4708, 2626, 4721, 2648);
           compass := randomRange(305, 360);
         end;

         with subLocs[1] do
         begin
           name := 'Grand Exchange Yews East';
           spsBox := intToBox(4653, 2632, 4686, 2664);
           compass := 320;
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_GE_YEWS].Defaults.Trees;
         end;
       end;

     LOC_DB_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Draynor Village Bank';
           spsBox := intToBox(4201, 3673, 4219, 3698);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_DB_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_DB_BANK;

           spsPath := [
             TPointArray([Point(4724, 3786), Point(4674, 3730),
                          Point(4647, 3786), Point(4210, 3687)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '10_9'])
           ];
         end;
       end;

     LOC_DB_WILLOWS:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Willows';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Draynor Village Willows';
           spsBox := intToBox(4164, 3710, 4202, 3754);
           objects := MSI_Scripts[SCRIPT_DB_WILLOWS].Defaults.Trees;
         end;
       end;

     LOC_DB_TREES:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Trees';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Draynor Village Trees';
           spsBox := intToBox(4141, 3567, 4177, 3600);
           objects := MSI_Scripts[SCRIPT_DB_TREES].Defaults.Trees;
         end;
       end;

     LOC_DB_OAKS:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Oaks';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Draynor Village Oaks West';
           spsBox := intToBox(4239, 3683, 4252, 3696);
           compass := randomRange(300, 360);
         end;

         with subLocs[1] do
         begin
           name := 'Draynor Village Oaks East';
           spsBox := intToBox(4257, 3668, 4271, 3681);
           compass := randomRange(260, 350);
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_DB_OAKS].Defaults.Trees;
         end;
       end;

     LOC_DB_FISH:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Fishing Spots';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Draynor Village Fishing Spots';
           spsBox := intToBox(4177, 3729, 4195, 3768);
           objects := MSI_Scripts[SCRIPT_DB_FISHER].Defaults.FishSpots;
         end;
       end;

     LOC_DB_CLAY:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Clay Mine';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Draynor Village Clay Mine';
           spsBox := intToBox(4391, 3376, 4413, 3395);
           objects := MSI_Scripts[SCRIPT_DB_CLAY].Defaults.Rocks;
         end;
       end;

     LOC_DB_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Draynor Village Yews';
         atBank := false;

         setLength(subLocs, 3);
         with subLocs[0] do
         begin
           name := 'Draynor Village Yews West';
           spsBox := intToBox(4443, 3734, 4460, 3746);
           compass := 270;
         end;

         with subLocs[1] do
         begin
           name := 'Draynor Village Yews Central';
           spsBox := intToBox(4491, 3774, 4511, 3786);
           compass := 270;
         end;

         with subLocs[2] do
         begin
           name := 'Draynor Village Yews East';
           spsBox := intToBox(4565, 3740, 4575, 3763);
           compass := 90;
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_DB_YEWS].Defaults.Trees;
         end;
       end;

     LOC_RM_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Rimmington Yews';
         atBank := false;

         setLength(subLocs, 4);
         with subLocs[0] do
         begin
           name := 'Rimmington Yews East';
           spsBox := intToBox(3537, 3718, 3549, 3728);
           compass := randomRange(280, 360);
         end;

         with subLocs[1] do
         begin
           name := 'Rimmington Yews Central';
           spsBox := intToBox(3559, 3720, 3576, 3731);
           compass := randomRange(60, 225);
         end;

         with subLocs[2] do
         begin
           name := 'Rimmington Yews West';
           spsBox := intToBox(3587, 3722, 3596, 3736);
           compass := randomRange(20, 55);
         end;

         with subLocs[3] do
         begin
           name := 'Rimmington Yews South';
           spsBox := intToBox(3568, 3743, 3583, 3755);
           compass := randomRange(280, 360);
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := [TREE_YEW_NEW];
         end;
       end;

     LOC_RM_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Rimmington Mine';
         atBank := false;

         setLength(subLocs, 4);
         with subLocs[0] do
         begin
           name := 'Rimmington Mine North';
           spsBox := intToBox(3737, 3660, 3762, 3678);
           objects := [ROCK_COPPER];
         end;

         with subLocs[1] do
         begin
           name := 'Rimmington Mine East';
           spsBox := intToBox(3769, 3694, 3790, 3720);
           objects := [ROCK_CLAY, ROCK_TIN];
         end;

         with subLocs[2] do
         begin
           name := 'Rimmington Mine South';
           spsBox := intToBox(3733, 3713, 3773, 3732);
           objects := [ROCK_IRON, ROCK_GOLD]
         end;

         with subLocs[3] do
         begin
           name := 'Rimmington Mine West';
           spsBox := intToBox(3707, 3686, 3727, 3716);
           objects := [ROCK_IRON];
         end;
       end;

     LOC_RM_WILLOWS:
       with MSI_Locations[loc] do
       begin
         name := 'Rimmington Willows';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Rimmington Willows';
           spsBox := intToBox(3822, 3983, 3845, 4010);
           objects := [TREE_WILLOW_NEW];
         end;
       end;

     LOC_FE_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Falador East Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Falador East Bank';
           spsBox := intToBox(3873, 3218, 3908, 3240);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_FE_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_FE_BANK;

           spsPath := [
             TPointArray([Point(4724, 3788), Point(4699, 3738),
                          Point(4653, 3729), Point(4644, 3781),
                          Point(4278, 3766), Point(4125, 3555),
                          Point(3862, 3541), Point(3862, 3245),
                          Point(3886, 3233)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '10_9', '10_8', '9_8', '9_7'])
           ];
         end;
       end;

     LOC_FW_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Falador West Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Falador West Bank';
           spsBox := intToBox(3615, 3165, 3628, 3186);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_FW_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_FW_BANK;

           spsPath := [
             TPointArray([Point(4725, 3786), Point(4675, 3729),
                          Point(4645, 3784), Point(4254, 3707),
                          Point(4128, 3557), Point(3861, 3542),
                          Point(3862, 3204), Point(3696, 3130),
                          Point(3635, 3147), Point(3621, 3180)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '10_9', '10_8', '9_8', '9_7', '8_7'])
           ];
         end;
       end;

     LOC_FW_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Falador West Mine';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Falador West Mine North';
           spsBox := intToBox(3473, 3185, 3482, 3216);
           objects := [ROCK_COAL, ROCK_COPPER];
         end;

         with subLocs[1] do
         begin
           name := 'Falador West Mine South';
           spsBox := intToBox(3450, 3217, 3467, 3244);
           objects := [ROCK_TIN, ROCK_IRON];
         end;
       end;

     LOC_FW_PUMP:
       with MSI_Locations[loc] do
       begin
         name := 'Falador WaterPump';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Falador WaterPump';
           spsBox := intToBox(3632, 3123, 3643, 3134);
           objects := MSI_Scripts[SCRIPT_FW_FILLER].Defaults.Objects;
         end;
       end;

     LOC_PS_WILLOWS:
       with MSI_Locations[loc] do
       begin
         name := 'Port Sarim Willows';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Port Sarim Willows South';
           spsBox := intToBox(4063, 3642, 4087, 3651);
         end;

         with subLocs[1] do
         begin
           name := 'Port Sarim Willows North';
           spsBox := intToBox(4085, 3610, 4101, 3627);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := [TREE_WILLOW_NEW];
       end;

     LOC_PS_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Port Sarim Yews';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Port Sarim Yews East';
           spsBox := intToBox(4055, 3565, 4067, 3582);
           compass := 280;
         end;

         with subLocs[1] do
         begin
           name := 'Port Sarim Yews West';
           spsBox := intToBox(4004, 3568, 4017, 3584);
           compass := 80;
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_PS_YEWS].Defaults.Trees;
         end;
       end;

     LOC_PS_DBOX:
       with MSI_Locations[loc] do
       begin
         name := 'Port Sarim Deposit Box';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Port Sarim Deposit Box';
           spsBox := intToBox(4012, 3710, 4039, 3723);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_PS_DBOX';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_PS_DBOX;

           spsPath := [
             TPointArray([Point(4725, 3786), Point(4667, 3729),
                          Point(4646, 3782), Point(4255, 3706),
                          Point(4127, 3555), Point(4028, 3716)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '10_9', '10_8'])
           ];
         end;
       end;

     LOC_LSW_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Lumbridge Swamp West Mine';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Lumbridge Swamp West Mine';
           spsBox := intToBox(4407, 4070, 4434, 4092);
           objects := MSI_Scripts[SCRIPT_LSW_MINER].Defaults.Rocks;
         end;
       end;

     LOC_LSE_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Lumbridge Swamp East Mine';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Lumbridge Swamp East Mine';
           spsBox := intToBox(4735, 4065, 4763, 4077);
           objects := MSI_Scripts[SCRIPT_LSE_MINER].Defaults.Rocks;
         end;
       end;

     LOC_LB_SPAWN:
       with MSI_Locations[loc] do
       begin
         name := 'Lumbridge Courtyard';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Lumbridge Courtyard';
           spsBox := intToBox(4706, 3763, 4739, 3809);
         end;
       end;

     LOC_EV_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Edgeville Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Edgeville Bank';
           spsBox := intToBox(4199, 2659, 4215, 2695);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_EV_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_EV_BANK;

           spsPath := [
             TPointArray([Point(4723, 3785), Point(4779, 3785),
                          Point(4696, 3553), Point(4282, 3430),
                          Point(4149, 3333), Point(4185, 2792),
                          Point(4210, 2680)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '11_8', '10_8', '10_7', '10_6'])
           ];
         end;
       end;

     LOC_EV_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Edgeville Yews';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Edgeville Yews South';
           spsBox := intToBox(4175, 2755, 4192, 2776);
           compass := randomRange(170, 190);
         end;

         with subLocs[1] do
         begin
           name := 'Edgeville Yews North';
           spsBox := intToBox(4173, 2720, 4189, 2740);
           compass := 275;
         end;

         for i := 0 to high(subLocs) do
         begin
           subLocs[i].camera := SRL_ANGLE_LOW;
           subLocs[i].objects := MSI_Scripts[SCRIPT_EV_YEWS].Defaults.Trees;
         end;
       end;

     LOC_EV_WELL:
       with MSI_Locations[loc] do
       begin
         name := 'Edgeville Well';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Edgeville Well';
           spsBox := intToBox(4161, 2636, 4182, 2657);
           objects := MSI_Scripts[SCRIPT_EV_SOFTENER].Defaults.Objects;
         end;
       end;

     LOC_BBV_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Barbarian Village Mine';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Barbarian Village Mine';
           spsBox := intToBox(4150, 2955, 4180, 2979);
           objects := MSI_Scripts[SCRIPT_BBV_MINER].Defaults.Rocks;
         end;
       end;

     LOC_BBV_FISH:
       with MSI_Locations[loc] do
       begin
         name := 'Barbarian Village Fishing Spots';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Barbarian Fishing North';
           spsBox := intToBox(4259, 2906, 4278, 2927);
         end;

         with subLocs[1] do
         begin
           name := 'Barbarian Fishing South';
           spsBox := intToBox(4238, 2944, 4256, 2960);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_BBV_FISHER].Defaults.FishSpots;
       end;

     LOC_SV_MAGICS:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Magic Trees';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do //East trees
         begin
           name := 'Seers Village East Magic Trees';
           spsBox := intToBox(2648, 3053, 2660, 3070);
         end;

         with subLocs[1] do //West trees
         begin
           name := 'Seers Village West Magic Trees';
           spsBox := intToBox(2628, 3053, 2636, 3069);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_SV_MAGICS].Defaults.Trees;
       end;

     LOC_SV_OAKS:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Oak Trees';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Seers Village Oak Trees';
           spsBox := intToBox(2719, 2709, 2743, 2728);
           objects := MSI_Scripts[SCRIPT_SV_OAKS].Defaults.Trees;
         end;
       end;

     LOC_SV_TREES:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Trees';
         atBank := False;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Seers Village Trees';
           spsBox := intToBox(2687, 2845, 2743, 2899);
           objects := MSI_Scripts[SCRIPT_SV_TREES].Defaults.Trees;
         end;
       end;

     LOC_SV_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Seers Village Bank';
           spsBox := intToBox(2730, 2675, 2758, 2686);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_SV_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_SV_BANK;

           spsPath := [TPointArray([])];

           spsAreas := [];
         end;
       end;

     LOC_SV_MAPLES:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Maples';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Seers Village East Maples';
           spsBox := intToBox(2747, 2636, 2769, 2652);
           objects := MSI_Scripts[SCRIPT_SV_MAPLES].Defaults.Trees;
         end;

         with subLocs[1] do
         begin
           name := 'Seers Village West Maples';
           spsBox := intToBox(2720, 2634, 2739, 2648);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_SV_MAPLES].Defaults.Trees;
       end;

     LOC_SV_YEWS:
       with MSI_Locations[loc] do
       begin
         name := 'Seers Village Yews';
         atBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Seers Village East Yew';
           spsBox := intToBox(2680, 2789, 2698, 2809);
         end;

         with subLocs[1] do
         begin
           name := 'Seers Village West Yews';
           spsBox := intToBox(2658, 2790, 2670, 2811);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_SV_YEWS].Defaults.Trees;
       end;

     LOC_GUILD_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Mining Guild';
         atBank := false;

         setLength(subLocs, 3);
         with subLocs[0] do
         begin
           name := 'Mining Guild West';
           spsBox := intToBox(318, 524, 362, 554);
           objects := [ROCK_COAL];
         end;

         with subLocs[1] do
         begin
           name := 'Mining Guild Central';
           spsBox := intToBox(357, 501, 402, 555);
           objects := [ROCK_COAL];
         end;

         with subLocs[2] do
         begin
           name := 'Mining Guild East';
           spsBox := intToBox(390, 493, 430, 553);
           objects := [ROCK_COAL, ROCK_MITHRIL];
         end;
       end;

     LOC_CG_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Crafting Guild Mine';
         atBank := false;

         setLength(subLocs, 3);
         with subLocs[0] do
         begin
           name := 'Crafting Guild Gold';
           spsBox := intToBox(3586, 3535, 3608, 3553);
           compass := randomRange(60, 190);
           subLocs[i].camera := SRL_ANGLE_HIGH;
           objects := [ROCK_GOLD];
         end;

         with subLocs[1] do
         begin
           name := 'Crafting Guild Clay';
           spsBox := intToBox(3587, 3520, 3609, 3530);
           objects := [ROCK_CLAY];
         end;

         with subLocs[2] do
         begin
           name := 'Crafting Guild Silver';
           spsBox := intToBox(3594, 3495, 3609, 3515);
           compass := randomRange(105, 130);
           subLocs[i].camera := SRL_ANGLE_HIGH;
           objects := [ROCK_SILVER];
         end;
       end;

     LOC_AK_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Al Kharid Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Al Kharid Bank';
           spsBox := intToBox(4906, 3971, 4928, 4013);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_AK_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_AK_BANK;

           spsPath := [
             TPointArray([Point(4726, 3788), Point(4774, 3788),
                          Point(4797, 3985), Point(4912, 3997)])
           ];

           spsAreas   := [
             TStringArray(['11_9', '12_9'])
           ];
         end;
       end;

     LOC_AK_RANGE:
       with MSI_Locations[loc] do
       begin
         name := 'Al Kharid Cooking Range';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Al Kharid Cooking Range';
           spsBox := intToBox(4920, 3928, 4939, 3947);
           objects := MSI_Scripts[SCRIPT_AK_COOKER].Defaults.CookingSpot;
         end;
       end;

     LOC_AK_MINE:
       with MSI_Locations[loc] do
       begin
         name := 'Al Kharid Mine';
         atBank := false;

         setLength(subLocs, 3);
         with subLocs[0] do
         begin
           name := 'Al Kharid Mine South';
           spsBox := intToBox(5020, 3499, 5043, 3521);
           objects := [ROCK_GOLD, ROCK_IRON];
         end;

         with subLocs[1] do
         begin
           name := 'Al Kharid Mine Central';
           spsBox := intToBox(5018, 3433, 5045, 3468);
           objects := [ROCK_SILVER, ROCK_MITHRIL, ROCK_IRON, ROCK_COAL];
         end;

         with subLocs[2] do
         begin
           name := 'Al Kharid Mine North';
           spsBox := intToBox(5021, 3389, 5052, 3422);
           objects := [ROCK_SILVER, ROCK_MITHRIL, ROCK_IRON, ROCK_TIN,
                       ROCK_ADAMANTITE, ROCK_COPPER];
         end;
       end;

     LOC_KJ_STILES:
       with MSI_Locations[loc] do
       begin
         name := 'Stiles On Karamja';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Stiles On Karamja';
           spsBox := intToBox(3234, 4085, 3254, 4101);
         end;
       end;

     LOC_KJ_FISH:
       with MSI_Locations[loc] do
       begin
         name := 'Karamja Fishing Spot';
         atBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Karamja Fishing Spot';
           spsBox := intToBox(3529, 3942, 3539, 3964);
           objects := MSI_Scripts[SCRIPT_KJ_NOTER].Defaults.FishSpots;
         end;
       end;

     LOC_CB_BANK:
       with MSI_Locations[loc] do
       begin
         name := 'Catherby Bank';
         atBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Catherby Bank';
           spsBox := intToBox(3060, 2883, 3087, 2900);
         end;

         with deathPath do
         begin
           name := 'LOC_LB_SPAWN to LOC_CB_BANK';
           startLoc := LOC_LB_SPAWN;
           endLoc := LOC_CB_BANK;

           spsPath := [TPointArray([])];
           spsAreas := [];
         end;
       end;

     LOC_CB_FISH:
       with MSI_Locations[loc] do
       begin
         name := 'Catherby Fishing Spots';
         atBank := false;

         setLength(subLocs, 4);
         with subLocs[0] do
         begin
           name := 'Catherby West Fishing Spot';
           spsBox := intToBox(3171, 2916, 3193, 2932);
         end;

         with subLocs[1] do
         begin
           name := 'Catherby West/Central Fishing Spot';
           spsBox := intToBox(3203, 2915, 3229, 2939);
         end;

         with subLocs[2] do
         begin
           name := 'Catherby East/Central Fishing Spot';
           spsBox := intToBox(3239, 2945, 3261, 2962);
         end;

         with subLocs[3] do
         begin
           name := 'Catherby East Fishing Spot';
           spsBox := intToBox(3262, 2938, 3285, 2954);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_CB_FISHER].Defaults.FishSpots;
       end;

     LOC_ALTAR_AIR:
       with MSI_Locations[loc] do
       begin
         Name := 'Air Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Air Altar';
           spsBox := intToBox(118, 399, 145, 431);
           objects := MSI_Scripts[SCRIPT_RC_AIR].Defaults.Objects;
         end;
       end;

     LOC_ALTAR_EARTH:
       with MSI_Locations[loc] do
       begin
         Name := 'Earth Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Earth Altar';
           spsBox := intToBox(346, 390, 373, 410);
           objects := MSI_Scripts[SCRIPT_RC_EARTH].Defaults.Objects;
         end;
       end;

     LOC_ALTAR_FIRE:
       with MSI_Locations[loc] do
       begin
         Name := 'Fire Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Fire Altar';
           spsBox := intToBox(344, 215, 368, 239);
           objects := MSI_Scripts[SCRIPT_RC_FIRE].Defaults.Objects;
         end;
       end;

     LOC_ALTAR_WATER:
       with MSI_Locations[loc] do
       begin
         Name := 'Water Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Water Altar';
           spsBox := intToBox(345, 58, 368, 81);
           objects := MSI_Scripts[SCRIPT_RC_WATER].Defaults.Objects;
         end;
       end;

     LOC_ALTAR_MIND:
       with MSI_Locations[loc] do
       begin
         Name := 'Mind Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Mind Altar';
           spsBox := intToBox(155, 61, 175, 82);
           objects := MSI_Scripts[SCRIPT_RC_MIND].Defaults.Objects;
         end;
       end;

     LOC_ALTAR_BODY:
       with MSI_Locations[loc] do
       begin
         Name := 'Body Altar';
         AtBank := false;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Body Altar';
           spsBox := intToBox(135, 230, 158, 250);
           objects := MSI_Scripts[SCRIPT_RC_BODY].Defaults.Objects;
         end;
       end;

     LOC_FG_BANK:
       with MSI_Locations[loc] do
       begin
         Name := 'Fishing Guild Bank';
         AtBank := true;

         setLength(subLocs, 1);
         with subLocs[0] do
         begin
           name := 'Fishing Guild Bank';
           spsBox := intToBox(2170, 2950, 2188, 2975);
         end;
       end;

     LOC_FG_FISH:
       with MSI_Locations[loc] do
       begin
         Name := 'Fishing Guild Spots';
         AtBank := false;

         setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Fishing Guild North Dock';
           spsBox := intToBox(2233, 2951, 2254, 2972);
         end;

         with subLocs[1] do
         begin
           name := 'Fishing Guild South Dock';
           spsBox := intToBox(2248, 2987, 2281, 3007);
         end;

         for i := 0 to high(subLocs) do
           subLocs[i].objects := MSI_Scripts[SCRIPT_FG_FISHER].Defaults.FishSpots;
       end;

     LOC_Y_MINE:
      with MSI_Locations[loc] do
      begin
        Name := 'Yanille Mine';
        AtBank := false;

        setLength(subLocs, 2);
         with subLocs[0] do
         begin
           name := 'Yanille Mine South Rocks';
           spsBox := intToBox(2330,4115,2370,4080);
           Objects := [ROCK_IRON,ROCK_COPPER,
            ROCK_CLAY,ROCK_TIN];
         end;

         with subLocs[1] do
         begin
          name:= 'Yanille Mine North Rocks';
          spsBox := intToBox(2330,4080,2355,4050);
          Objects := [ROCK_IRON,ROCK_TIN,ROCK_MITHRIL];
         end;
      end;

     LOC_Y_BANK:
      with MSI_Locations[loc]do
      begin
        Name := 'Yanille Bank';
        AtBank := True;

      setLength(subLocs,1);
        with subLocs[0] do
        begin
          name := 'Yanille Bank';
          spsBox := intToBox(2270,4305,2290,4285);
        end;
      end;

     LOC_FC_BANK:
      with MSI_Locations[loc]do
      begin
        Name :='Fishing Colony Bank';
        AtBank := True;

      setLength(subLocs,1);
        with subLocs[0] do
        begin
          name := 'Fishing Colony Bank';
          spsBox := intToBox(1150,1870,1165,1895);
          Objects := [NPC_ARNOLD];
        end;
      end;

     LOC_FC_FISH:
      with MSI_Locations[loc]do
      begin
        Name :='Fishing Colony Fishing Spots';
        AtBank :=False;

      setLength(subLocs,2);
        with subLocs[0] do
        begin
          name := 'Fishing Colony East Spots';
          spsBox := intToBox(1215,1835,1260,1835);
          Objects := [FISHSPOT_NET_MONKFISH];
        end;

        with subLocs[1] do
        begin
          name := 'Fishing Colony West Spots';
          spsBox := intToBox(1165,1830,1215,1835);
          Objects := [FISHSPOT_NET_MONKFISH];
        end;
      end;

  end;

  with MSI_Locations[loc] do
  begin
    constant := loc;

    // set all path leg's surfaces to RUNESCAPE_SURFACE if not already set
    {$IFDEF SPS}
    if (deathPath.name <> '') then
    begin
      if (length(deathPath.spsAreas) <> length(deathPath.spsPath)) then
        MSI_Debug('WARNING: Invalid SPSAreas length for location: '+name);

      if (length(deathPath.spsSurfaces) <= 0) then
      begin
        setLength(deathPath.spsSurfaces, length(deathPath.spsPath));

        for i := 0 to high(deathPath.spsSurfaces) do
          deathPath.spsSurfaces[i] := RUNESCAPE_SURFACE;
      end;
    end;
    {$ENDIF}

    for i := 0 to high(subLocs) do
    begin
      // if compass/camera isn't set, set to default
      if (varType(subLocs[i].compass) = 0) then
      begin
        subLocs[i].compass := 0;
        subLocs[i].camera := SRL_ANGLE_HIGH;
      end;
    end;

    _subLocs := subLocs;
  end;

  result := (MSI_Locations[loc].Name <> '');
end;

(*
MSI_LoadAllLocations
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_LoadAllLocations;

Loads all the locations into the MSI_Locations array.  This procedure should
only be called in MSI_Setup.

.. note::

  | Author: Coh3n
  | Last Updated: 02 August 2010 by Coh3n

*)
procedure MSI_LoadAllLocations;
var
  i: Integer;
begin
  for i := 0 to High(MSI_Locations) do
    MSI_LoadLocation(i);
end;

(*
MSI_SetPlayerLoc
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetPlayerLoc(): boolean;

Set's the player's location.  Checks the script's starting and ending locations.
If the player isn't at either, it won't set the player's location.

.. note::

  | Author: NCDS
  | Last Updated: 06 September 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetPlayerLoc();
*)
function MSI_SetPlayerLoc(): boolean;
var
  i: Integer;
  locArr: TIntegerArray;
  Script: TScript;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetPlayerLoc');

  with MSI_Players[CurrentPlayer] do
  begin
    Script := MSI_Scripts[Scripts[CurrentScript].Name];
    SetLength(locArr, 2);
    locArr[0] := Script.PathInfo.StartLoc;
    locArr[1] := Script.PathInfo.EndLoc;

    for i := 0 to 1 do
      if (MSI_AtLocation(locArr[i], false)) then
      begin
        Location := locArr[i];
        result := true;
        break;
      end else
        if (i = 1) then
          if (not MSI_WalkPath(script.pathInfo, ((invCount < 15) and (script.skillConst <> SKILL_RUNECRAFTING)) or ((invCount > 15) and (script.skillConst = SKILL_RUNECRAFTING)))) then
            result := MSI_DeathWalk()
          else
            result := true;

    if (result) then
      MSI_Debug('Player''s location: '+MSI_Locations[Location].Name)
    else
      MSI_Debug('Failed to get player''s location');
  end;

  MSI_CloseHeader('MSI_SetPlayerLoc: '+boolToStr(result));
end;

(*
MSI_ValidSubLoc
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ValidSubLoc(loc: TLocation; subIndex: integer): boolean;

Returns true if the player is autoing an object that appears in the sub location
of the location 'loc' and sub location element 'subIndex'.


.. note::

  | Author: Coh3n
  | Last Updated: 07 September 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_ValidSubLoc(MSI_Locations[LOC_VE_BANK], i)) then
    MSI_Relocate(LOC_VE_BANK);
*)
function MSI_ValidSubLoc(loc: TLocation; subIndex: integer): boolean;
var
  i: integer;
  objs: TIntegerArray;
  exceptions: TIntegerArray;
begin
  result := loc.atBank; // always valid if the location is a bank

  // spawning point is valid; if more locations are added, an array should be used
  exceptions := [LOC_LB_SPAWN, LOC_KJ_STILES];
  if (not result) then
    result := (inIntArray(exceptions, loc.constant));

  if (not result) then
  begin
    objs := MSI_GetPlayerObjects();

    for i := 0 to high(loc.subLocs[subIndex].objects) do
      if (inIntArray(objs, loc.subLocs[subIndex].objects[i])) then
      begin
        result := true;
        break;
      end;
  end;

  if (not result) then
    MSI_SubDebug('MSI_ValidSubLoc ('+loc.subLocs[subIndex].name+'): '+toStr(result));
end;

(*
MSI_Relocate
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_Relocate(Loc: Integer): Boolean;

Relocates the player to the location 'Loc'. Only relocates if the player is
near the location. Returns true if relocation was successful.

.. note::

  | Author: Coh3n and NCDS
  | Last Updated: 21 August 2011 by NCDS

Example:

.. code-block:: pascal

  if (MSI_Relocate(LOC_VE_MINE)) then
    MSI_Debug('Successfully relocated');
*)
function MSI_Relocate(Loc: Integer): Boolean;
var
  hSubLoc, i, cP: integer;
  mPos: TPoint;
  local_subLocs: TSubLocArray;
begin
  if (not loggedIn) then
    exit;

  // return true if a random is solved (don't want to relocate inside the random)
  if (MSI_FindRandoms(true)) then
  begin
    result := true;
    exit;
  end;

  MSI_AddHeader('MSI_Relocate (' + MSI_Locations[loc].Name + ')');

  if (Length(MSI_Locations[loc].subLocs) < 1) then
  begin
    MSI_Debug('No relocation points for ' + MSI_Locations[loc].Name);
    result := true;
  end;

  if (not result) then
  begin
    mPos := MSI_GetMyPos();

    with MSI_Locations[Loc] do
    begin
      // check to see if player's in the last box, if so, invert the boxes
      cP := MSI_Players[CurrentPlayer].CurrentPoint;
      hSubLoc := high(subLocs);

      if (cP = hSubLoc) then
      begin
        setLength(local_subLocs, (hSubLoc + 1));

        for i := hSubLoc downto 0 do
          local_subLocs[hSubLoc - i] := subLocs[i];

        subLocs := local_subLocs;
        cp := (hSubLoc - cP);
      end;

      MSI_Players[CurrentPlayer].CurrentPoint := cP;

      // loop through each "subLoc"
      for i := cP to hSubLoc do
      begin
        // no point in relocating to a location that doesn't have the object we want
        if (not MSI_ValidSubLoc(MSI_Locations[loc], i)) then
          continue;

        // if player is already in box, continue
        if (pointInBox(mPos, subLocs[i].spsBox)) then
        begin
          MSI_BoxToMM(subLocs[i].spsBox);
          MSI_Debug('At sub-location ' + subLocs[i].name);
          result := true;

          continue;
        end;

        MSI_FindRandoms(true);

        if (MSI_WalkTPA([mPos, middleBox(subLocs[i].spsBox)], -1, 30)) then
        begin
          result := true;
          MSI_Debug('Relocating to sub-location: ' + subLocs[i].name);

          setAngle(subLocs[i].camera);
          makeCompass(subLocs[i].compass);

          cP := i;
          MSI_Flag(5);
          break;
        end else
          cP := 0;
      end;
    end;
  end;

  // we shouldn't ever have to death walk if we've relocated properly
  if (loc <> LOC_LB_SPAWN) then
    if (result) then
      MSI_Settings[SETUP_DEATH_WALK] := false;

  MSI_Players[CurrentPlayer].CurrentPoint := cP;
  MSI_CloseHeader('MSI_Relocate: ' + boolToStr(result));
end;

(*
MSI_AtLocation
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AtLocation(loc: integer; relocate: boolean): boolean;

Returns true if the player is at the location 'Loc'. If the player isn't at the
location and 'Relocate' is set to true, will call MSI_Relocate.

.. note::

  | Author: Coh3n
  | Last Updated: 27 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_AtLocation(LOC_VE_BANK, True)) then
    MSI_Debug('We are at Varrock East Bank');
*)
function MSI_AtLocation(loc: integer; relocate: boolean): boolean;
var
  i: integer;
  mPos: TPoint;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_AtLocation');

  if (loc = LOC_POWER_SKILL) then
  begin
    MSI_Debug('Powerskilling, no defined location');
    result := true;
  end;

  if (not(result)) then
  begin
    mPos := MSI_GetMyPos();

    with MSI_Locations[loc] do
    begin
      for i := 0 to high(subLocs) do
      begin
        if (not MSI_ValidSubLoc(MSI_Locations[loc], i)) then
          continue;

        MSI_Debug('Checking sub-location: ' + subLocs[i].name);

        if (pointInBox(mPos, subLocs[i].spsBox)) then
        begin
          MSI_BoxToMM(subLocs[i].spsBox);
          result := true;

          setAngle(subLocs[i].camera);
          makeCompass(subLocs[i].compass);

          MSI_Debug('Player is at ' + subLocs[i].name);
          MSI_Players[CurrentPlayer].CurrentPoint := i;
          break;
        end;
      end;

      if (not result) then
        if (relocate) then
          result := MSI_Relocate(loc);

      if (result) then
      begin
        // shouldn't have to death walk if we're at the right location
        if (loc <> LOC_LB_SPAWN) then
          MSI_Settings[SETUP_DEATH_WALK] := false;

        MSI_Players[CurrentPlayer].Location := constant;
      end else
        MSI_Debug('Player not at ' + name);
    end;
  end;

  MSI_CloseHeader('MSI_AtLocation: ' + boolToStr(result));
end;

