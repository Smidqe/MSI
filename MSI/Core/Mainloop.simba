(*
Mainloop
========

The Mainloop file holds all the main MSI functions that are called in
MSI_MainLoop.

The source for Mainloop.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Mainloop.simba>`_.

*)

(*
MSI_InitSRLPlayers
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_InitSRLPlayers();

A simple procedure that sets the SRL global variable 'Players.'  Since MSI uses
it's own player information array, SRL's still needs to be set so the login
and other SRL routines will still work properly.

.. note::

  | Author: Coh3n
  | Last Updated: 08 July 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_InitSRLPlayers();
*)
procedure MSI_InitSRLPlayers();
var
  i: integer;
begin
  for i := 0 to High(Players) do
  begin
    Players[i].Name   := MSI_Players[i].Name;
    Players[i].Pass   := MSI_Players[i].Pass;
    Players[i].Nick   := MSI_Players[i].Nick;
    Players[i].Pin    := MSI_Players[i].Pin;
    Players[i].Active := MSI_Players[i].Active;
    Players[i].Integers[0] := MSI_Players[i].TotalLoads;
    Players[i].Integers[1] := MSI_Players[i].BreakLoads;
    Players[i].Integers[2] := MSI_Players[i].TotalTime;
    Players[i].Integers[3] := MSI_Players[i].BreakTime;
    Players[i].Booleans[0] := MSI_Players[i].Member;
    Players[i].Member := MSI_Players[i].Member;

    if (MSI_Settings[SETUP_SWITCH_WORLDS]) then
      Players[i].WorldInfo := [Players[i].Member, -1, False];

    if (not Players[i].Active) then
      MSI_Players[i].ReportInfo.FalseReason := 'User set to false';

    Players[i].BoxRewards := ['mote', 'ostume', 'oins', 'unes', 'ems'];
    MSI_Players[i].GetObjects := @MSI_GetPlayerObjects;
    MSI_Players[i].GetScript := @MSI_GetPlayerScript;
  end;
end;

(*
MSI_SetupPlayer
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupPlayer: Boolean;

Logs the player in if not already logged in, and calls the current player's
current script's setup procedure.

.. note::

  | Author: Coh3n
  | Last Updated: 18 May 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_SetupPlayer) then
    MSI_UnsetPlayer('Failed to setup player', False);
*)
function MSI_SetupPlayer: Boolean;
var
  i: Integer;
begin
  MSI_AddHeader('MSI_SetupPlayer');

  if (not LoggedIn) then
  begin
    MSI_Debug('Player is not logged in');
    LoginPlayer();
    if (not (WaitFunc(@LoggedIn, 100, 15000))) then
    begin
      MSI_CloseHeader('MSI_SetupPlayer: ' + BoolToStr(Result));
      Exit;
    end;
  end;

  // Add logins to stats
  stats_IncVariable('Total Logins', 1);

  // Standard setup procedures
  MSI_FindRandoms(True);
  ClickNorth(SRL_ANGLE_HIGH);
  RunEnergy(20);

  // Setup the player
  with MSI_Players[CurrentPlayer] do
    if (MSI_SetPlayerLoc()) then
    begin
      // Get the player's skill levels for each script
      MSI_SetSkillLevels();

      // Check to see if there's items in the set exceptions array
      for i := 0 to high(Scripts[CurrentScript].Exceptions) do
        if (not existsItem(Scripts[CurrentScript].Exceptions[i])) then
        begin
          MSI_Debug('No item found in inventory slot: '+intToStr(i));
          deleteValueInIntArray(Scripts[CurrentScript].Exceptions, i);
        end;

      result := MSI_Scripts[Scripts[CurrentScript].Name].PlayerSetup();
    end;

  MSI_CloseHeader('MSI_SetupPlayer: ' + BoolToStr(Result));
end;

(*
MSI_CountItems
~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_CountItems;

This procedure is called before the player banks/drops after finishing a load.
It will count the script items in the player's inventory and add them to the
progress report.

.. note::

  | Author: Coh3n
  | Last Updated: 07 November 2010 by Coh3n

Example:

.. code-block:: pascal

  if (WalkedToBank) then
    MSI_CountItems;
*)
procedure MSI_CountItems;
var
  itemCount, expCount, j, k: Integer;
  exps: TExtendedArray;
  script: TScript;
  item: TItem;
begin
  if (not LoggedIn) then
    Exit;

  GameTab(TAB_INV);

  with MSI_Players[CurrentPlayer] do
  begin
    script := MSI_Scripts[Scripts[CurrentScript].Name];

    for j := 0 to High(ReportInfo.Items[CurrentScript]) do
    begin
      exps := MSI_GetItemExp(script.skillConst, reportInfo.items[currentScript][j]);

      for k := 0 to High(ReportInfo.Items[CurrentScript][j]) do
      begin
        expCount := 0;
        itemCount := 0;

        item := MSI_Items[ReportInfo.Items[CurrentScript][j][k]];

        if (item.stackable) then
          itemCount := ItemAmount('inv', 'dtm', item.DTM, [])
        else
          itemCount := CountItems('dtm', item.DTM, []);

        if (script.skillConst <> SKILL_RUNECRAFTING) then
          expCount := round(exps[k] * itemCount)
        else
          if (itemCount > 0) then
            expCount := round(exps[k] * 28);

        MSI_AddToProggy(PROG_ADD_EXP, -1, -1, expCount);  // Adds experience
        MSI_AddToProggy(PROG_ADD_ITEMS, j, k, itemCount); // Adds items

        MSI_Debug('MSI_CountItems: Found ' + toStr(itemCount) + ' of ' +
          item.name + ' (' + toStr(expCount) + ' XP)');
      end;
    end;
  end;
end;

(*
MSI_Walk
~~~~~~~~

.. code-block:: pascal

  function MSI_Walk(ToLoc: Boolean): Boolean;

Walks either to the autoing location or from the autoing location to the bank.
Depends on the boolean parameter 'ToLoc'.  Setting 'ToLoc' to true will walk to
the location, setting it the false will walk from the location to the bank.

.. note::

  | Author: Coh3n
  | Last Updated: 27 April 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_Walk(True)) then
    MSI_UnsetPlayer('Failed to walk to location', False);
*)
function MSI_Walk(ToLoc: Boolean): Boolean;
var
  Script: TScript;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_Walk');

  with MSI_Players[CurrentPlayer] do
  begin
    MSI_Debug('Player''s Location = '+MSI_Locations[Location].Name);
    Script := MSI_Scripts[Scripts[CurrentScript].Name];

    if (ToLoc) then
      Result := MSI_AtLocation(Script.PathInfo.EndLoc, False)
    else
      Result := MSI_AtLocation(Script.PathInfo.StartLoc, False);

    if (not Result) then
      Result := MSI_PerformWalk(Script.PathInfo, ToLoc);
  end;

  if (Result) then
    stats_IncVariable('Times Walked', 1);

  MSI_CloseHeader('MSI_Walk: ' + BoolToStr(Result));
end;

(*
MSI_AutoObjects
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AutoObjects: Boolean;

Calls the current player's current script's AutoObjects procedure.  If the
script requires dropping, it will drop the player's inventory.

.. note::

  | Author: Coh3n
  | Last Updated: 04 August 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    MSI_UnsetPlayer('Failed to auto objects', False);
*)
function MSI_AutoObjects: Boolean;
var
  scriptConst: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_AutoObjects');

  scriptConst := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name;

  Result := MSI_Scripts[scriptConst].AutoObjects();

  if (Result) then
    if (MSI_Scripts[scriptConst].BankType = Drop) then //drop the items if not banking
    begin
      MSI_CountItems;
      MSI_DropAll;
      MSI_AddToProggy(PROG_ADD_LOADS, -1, -1, -1);
    end;

  MSI_CloseHeader('MSI_AutoObjects: ' + BoolToStr(Result));
end;

(*
MSI_BankMaterials
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_BankMaterials(): Boolean;

Calls the current player's current script's BankObjects procedure.  Returns true
if banking was successful.  Covers any type of banking from standard to NPC to
depositing and withdrawing.

.. note::

  | Author: Coh3n
  | Last Updated: 24 March 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_BankMaterials) then
    MSI_UnsetPlayer('Failed to bank materials', False);
*)
function MSI_BankMaterials(): Boolean;
var
  scriptConst, t: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_BankMaterials');
  MSI_CountItems;

  scriptConst := MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name;

  while (t < 5) do
  begin
    inc(t);

    if (MSI_Scripts[scriptConst].bankObjects()) then
    begin
      result := true;
      break;
    end;
  end;

  MSI_AddToProggy(PROG_ADD_LOADS, -1, -1, -1);
  stats_IncVariable('Times Banked', 1);

  MSI_CloseHeader('MSI_BankMaterials: '+BoolToStr(Result));
end;

(*
MSI_TimedOut
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_TimedOut: Boolean;

Is called before setting the player false.  A player may have been set to false
somewhere in SRL (i.e. failed a random), or the connection may have timed out.
This checks for both, and if timed out, will wait and log the player back in.

.. note::

  | Author: Coh3n
  | Last Updated: 10 June 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    if (not MSI_TimedOut) then
      MSI_UnsetPlayer('Failed to auto objects', False);
*)
function MSI_TimedOut: Boolean;
var
  t: Integer;
begin
  Result := False;

  // Check if SRL set player to false
  if (not Players[CurrentPlayer].Active) then
  begin
    MSI_Debug('Went inactive somewhere in SRL');
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'Went inactive somewhere in SRL';
    MSI_Players[CurrentPlayer].Active := False;

    if (Players[CurrentPlayer].Rand <> '') then
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'In random: '+Players[CurrentPlayer].Rand;

    Exit;
  end;

  t := GetSystemTime + 10000;
  while (GetSystemTime < t) do
    if (LobbyScreen) or (not LoggedIn) then
    begin
      MSI_SubDebug('MSI_TimedOut: Suspicion of connection loss');

      if (LobbyScreen) then
        MouseBox(80, 450, 560, 470, 1)
      else
        if (not LoggedIn) then
          LoginPlayer;

      Result := True;
      Break;
    end;

  if (Result) then
    WaitFunc(@LoggedIn, 500, 10000);
end;

(*
MSI_UnsetPlayer
~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_UnsetPlayer(reason: String; setReason: Boolean);

Sets the current player's activity to false.  Will set the reason as 'reason' if
'setReason' is true, or if a reason hasn't been set elseware.  Switches to the
next player or terminates the script if all players are inactive.

.. note::

  | Author: Sir R. Magician & Coh3n
  | Last Updated: 03 July 2010 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_AutoObjects) then
    if (not MSI_TimedOut) then
      MSI_UnsetPlayer('Failed to auto objects', False);
*)
procedure MSI_UnsetPlayer(reason: String; setReason: Boolean);
begin
  MSI_AddHeader('MSI_UnsetPlayer');

  if (BankScreen) then
    CloseBank;

  MSI_Debug(reason);
  MSI_Players[CurrentPlayer].Active := False;
  Players[CurrentPlayer].Active := False;

  if (setReason) then
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := reason
  else
    if (MSI_Players[CurrentPlayer].ReportInfo.FalseReason = '') then
      MSI_Players[CurrentPlayer].ReportInfo.FalseReason := reason;

  if (Players[CurrentPlayer].Rand <> '') then
    MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'In random: '+Players[CurrentPlayer].Rand;

  MSI_ProgressReport;

  if ((HowManyPlayers <= 1) or (PlayersActive <= 0)) then
  begin
    Logout();
    MSI_SubDebug('All players inactive');
    TerminateScript();
  end else
    if MSI_Settings[SETUP_RANDOM_NP] then
      RandomNextPlayer(False)
    else
      NextPlayer(false);

  // reset after switching players
  MSI_Settings[SETUP_DEATH_WALK] := true;

  stats_IncVariable('Total Logins', 1);
  MSI_CloseHeader('MSI_UnsetPlayer: Finished');
end;

(*
MSI_HandleBreaking
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_HandleBreaking;

Simulates a "human-like" breaking.  If MSI_Settings[SETUP_HUMAN_BREAK] (script setup
variable found in RunMe.simba) is set to true it will randomly logout,
time-out, or exit to the lobby, otherwise it will just exit to the lobby.
If using multiple players, it will switch to the next player.

.. note::

  | Author: Coh3n & NCDS
  | Last Updated: 06 May 2011 by Coh3n

Example:

.. code-block:: pascal

  if (TimeToBreak) then
    MSI_HandleBreaking;
*)
procedure MSI_HandleBreaking;
var
  t, _avg: Integer;
begin
  if (not LoggedIn) then
    Exit;

  if not MSI_Settings[SETUP_HUMAN_BREAK] then
    if MSI_Players[CurrentPlayer].BreakTime = 0 then
      if MSI_Settings[SETUP_BREAK_TIME] = 0 then
        Exit;

  if (BankScreen) then
    CloseBank;

  MSI_AddHeader('MSI_HandleBreaking');

  if (HowManyPlayers = 1) or (PlayersActive = 1) then
  begin
    MSI_Debug('Taking a short break');

    if MSI_Settings[SETUP_HUMAN_BREAK] then
      case Random(10) of

        0, 2: Logout;

        1: while LoggedIn do
           begin
             Wait(RandomRange(200, 500));
             MSI_FindRandoms(False);
           end;

        3..6: begin
                t := (GetSystemTime + RandomRange(60000, 60000 * 3));
                while (t > GetSystemTime) and LoggedIn do
                begin
                  Wait(RandomRange(200, 500));
                  MSI_FindRandoms(False);
                end;

                if LoggedIn then
                  if InRange(Random(10), 1, 5) then
                    Logout
                  else
                    ExitToLobby;
              end;

        7..9: ExitToLobby;
      end
    else
      if InRange(Random(10), 2, 9) then
        ExitToLobby;

    _avg := Round(SETUP_BREAK_TIME * RANDOM_TIME_PERCENT);
    t := (GetSystemTime + ((MSI_Settings[SETUP_BREAK_TIME] * 60000) + RandomRange(-_avg * 60000, _avg * 60000)));
    while GetSystemTime < t do
    begin
      MSI_Debug('Break time remaining: '+MsToTime(t - GetSystemTime, Time_Formal));
      Wait(RandomRange(2000, 25000));
      if LoggedIn then
        MSI_FindRandoms(False);
    end;

    MSI_Debug('Break over, continuing to play');
    LoginPlayer();
  end else
  begin
    MSI_Debug('Switching players');
    if MSI_Settings[SETUP_RANDOM_NP] then
      RandomNextPlayer(True)
    else
      NextPlayer(True);
  end;

  WaitFunc(@LoggedIn, 100, 15000);

  stats_IncVariable('Total Logins', 1);
  MSI_CloseHeader('MSI_HandleBreaking: LoggedIn = ' + BoolToStr(LoggedIn));
end;

(*
MSI_CheckLoads
~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_CheckLoads(TempLoads: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;

Checks the current player's loads done with the temporary loads done parameter,
'TempLoads'.  If maximum loads are finished, 'reason' is set so user's know that
player has finished.  If 'TempLoads' exceeds the player's loads to do before
breaking, 'reason' is not set, and 'TakeBreak' is set to true so the script will
take a break or switch to the next player.

.. note::

  | Author: Coh3n
  | Last Updated: 03 December 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_CheckLoads(tmp, reason, tBreak)) then
    if (not tBreak) then
      MSI_UnsetPlayer(reason, false)
    else
      MSI_HandleBreaking;
*)
function MSI_CheckLoads(TempLoads: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;
var
  _avg: Integer;
begin
  with MSI_Players[CurrentPlayer] do
  begin
    // Handle finishing total loads
    if (TotalLoads > 0) then
    begin
      MSI_SubDebug('Total loads done: '+IntToStr(ReportInfo.LoadsDone));

      _avg := Round(TotalLoads * RANDOM_TIME_PERCENT);

      if (ReportInfo.LoadsDone >= (TotalLoads + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total loads');
        Reason := 'Finished total loads!';
        Result := True;
        Exit;
      end;
    end;

    // Breaking via loads
    if (BreakLoads > 0) then
    begin
      MSI_SubDebug('Temp loads done: '+IntToStr(TempLoads));

      _avg := Round(BreakLoads * RANDOM_TIME_PERCENT);

      if (TempLoads >= (BreakLoads + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished loads before breaking');
        TakeBreak := True;
        Result := True;
        Exit;
      end;
    end;
  end;
end;

(*
MSI_CheckTime
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_CheckTime(TempTime: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;

Works exactly like MSI_CheckLoads, excepts compares 'TempTime' with the current
player's playing time.

.. note::

  | Author: Coh3n
  | Last Updated: 03 December 2010 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_CheckTime(tmp, reason, tBreak)) then
    if (not tBreak) then
      MSI_UnsetPlayer(reason, false)
    else
      MSI_HandleBreaking;
*)
function MSI_CheckTime(TempTime: Integer; var Reason: string; var TakeBreak: Boolean): Boolean;
var
  _avg: Integer;
begin
  with MSI_Players[CurrentPlayer] do
  begin
    // Completed total time (common for all skills)
    if (TotalTime > 0) then
    begin
      MSI_SubDebug('Total playing time: '+IntToStr(Round(ReportInfo.PlayerTime / 60000)));
      MSI_SubDebug('Max playing time: '+IntToStr(TotalTime));

      _avg := Round(TotalTime * RANDOM_TIME_PERCENT);

      if (Round(ReportInfo.PlayerTime / 60000) >= (TotalTime + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total time');
        Reason := 'Finished total time!';
        Result := True;
        Exit;
      end;
    end;

    // Handle breaking via time (common for all skills)
    if (BreakTime > 0) then
    begin
      MSI_SubDebug('Temp playing time: '+IntToStr(TempTime));

      _avg := Round(BreakTime * RANDOM_TIME_PERCENT);

      if (Round(TempTime / 60000) >= (BreakTime + RandomRange(-_avg, _avg))) then
      begin
        MSI_SubDebug('Finished total time before breaking');
        TakeBreak := True;
        Result := True;
        Exit;
      end;
    end;
  end;
end;

(*
MSI_SetScriptLength
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetScriptLength();

Called AFTER DeclarePlayers. Initially, each player's Scripts length is 100.
This procedure sets the length to how many scripts the user set for each player.
Also sets the length of the player's report information arrays.

.. note::

  | Author: Coh3n
  | Last Updated: 11 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetScriptLength;
*)
procedure MSI_SetScriptLength(); // SetLength(MSI_Players[i].Scripts, 100);
var
  i, j: Integer;
begin
  for i := 0 to High(MSI_Players) do
    for j := 0 to High(MSI_Players[i].Scripts) do
      if (MSI_Players[i].Scripts[j].Name = 0) then // If the user hasn't set it
      begin
        SetLength(MSI_Players[i].Scripts, j);
        SetLength(MSI_Players[i].ReportInfo.ScriptTimes, j);
        SetLength(MSI_Players[i].ReportInfo.SkillLevels, j);
        SetLength(MSI_Players[i].ReportInfo.GainedExps, j);
        SetLength(MSI_Players[i].ReportInfo.ScriptCounts, j);
        Break;
      end;
end;

(*
MSI_MainLoop
~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_MainLoop;

MSI's mainloop.  Pretty straight forward.  Does what the user wants depending on
the global and player settings.  Called only once in RunMe.simba.

.. note::

  | Author: Coh3n
  | Last Updated: 28 March 2011 by NCDS

Example:

.. code-block:: pascal

  MSI_Mainloop;
*)
procedure MSI_MainLoop;
var
  i, j, k, tmpLoads, tmpTime, time, iCount: Integer;
  takeBreak: Boolean;
  reason: string;
  nPlayer: Boolean;
label
  AtBank;
begin
  MSI_SetScriptLength;
  MSI_SetReportInfo;
  {$IFDEF SRL_REMOTE}
  SetupSRLRemote('MSI Pheonix', ['Total Loads', 0, 'Break Loads', 1, 'Total Time', 2, 'Break Time', 3], ['Member', 0], [], [TStringArray([])]);
  {$ENDIF}

  // Warns the user if using an invalid script with SPS
  for i := 0 to high(MSI_Players) do
    for j := 0 to high(MSI_Scripts) do
      for k := 0 to high(MSI_Players[i].Scripts) do
        if (MSI_Scripts[j].Constant = MSI_Players[i].Scripts[k].Name) then
          if (MSI_Scripts[MSI_Players[i].Scripts[k].Name].BankObjects <> nil) then
            if (length(MSI_Scripts[j].PathInfo.SPSAreas) <= 0) then
              ShowMessage('WARNING: Player ('+MSI_Players[i].Name+') cannot run '+
                          'script ('+MSI_Scripts[j].Name+') as it is unsupported by SPS. '+
                          'Setting script to false.');

  repeat
    MSI_ResetRemote;

    // Reset temporary variables used for breaking
    tmpLoads := 0;
    MarkTime(tmpTime);

    {$IFDEF SPS}
    try
      MSI_SetupSPS(MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].PathInfo.SPSSurfaces[0],
                   MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].PathInfo.SPSAreas[0]);
    except
      MSI_Debug('Invalid SPS Areas and/or Surfaces in MSI_Mainloop');
    end;
    {$ENDIF}

    // Setup player
    if (not MSI_SetupPlayer) then
    begin
      if (MSI_TimedOut) then
        Continue;

      MSI_UnsetPlayer('Failed to setup player', True);
      Continue;
    end;

    repeat
      MarkTime(time);
      if (stats_Commit) then
        MSI_Debug('Committed to SRL stats');

      // Walk to location if using a bankable script
      if (MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankObjects <> nil) then
      begin
        // Deposits excess items if already at a bank
        if (not MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].GetMaterials) then
        begin
          iCount := InvCount;
          if ((InvCount > Length(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Exceptions))) then
          begin
            MSI_Debug('Inventory count = '+ToStr(iCount));
            MSI_Debug('Exceptions Length = '+ToStr(Length(MSI_Players[CurrentPlayer].Scripts[CurrentScript].Exceptions)));
            if (MSI_Locations[MSI_Players[CurrentPlayer].Location].AtBank) then
              if (MSI_AtLocation(MSI_Players[CurrentPlayer].Location, True)) then
              begin
                MSI_Debug('Found items in inventory, depositing..');
                goto AtBank;
              end;
          end;
        end;

        if (not MSI_Walk(True)) then
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to walk to location', False);
          Break;
        end;
      end;

      // Perform the skill
      if (not MSI_AutoObjects) then
      begin
        if (MSI_TimedOut) then
          Break;

        MSI_UnsetPlayer('Failed to use script: ' + MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].Name, False);
        Break;
      end;

      // Walks to the bank if using a bankable script
      if (MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name].BankObjects <> nil) then
      begin
        if (not MSI_Walk(False)) then // Walk to the bank
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to walk to bank', False);
          Break;
        end;

        // Banks the proper materials
        AtBank:
        if (not MSI_BankMaterials) then
        begin
          if (MSI_TimedOut) then
            Break;

          MSI_UnsetPlayer('Failed to bank', False);
          Break;
        end;
      end;

      // Set the progress report times
      with MSI_Players[CurrentPlayer].ReportInfo do
      begin
        IncEx(PlayerTime, TimeFromMark(time));
        IncEx(ScriptTimes[CurrentScript], TimeFromMark(time));
      end;

      MSI_ProgressReport;
      MSI_ResetRemote;

      Inc(tmpLoads);

      // Handle the breaking and unsetting of the current player
      nPlayer := MSI_CheckTime(TimeFromMark(tmpTime), reason, takeBreak);
      if (not nPlayer) then
        nPlayer := MSI_CheckLoads(tmpLoads, reason, takeBreak);

      // Check the script's MaxLevel attribute
      if (MSI_Players[CurrentPlayer].Scripts[CurrentScript].MaxLevel > 0) then
        if (MSI_Players[CurrentPlayer].ReportInfo.SkillLevels[CurrentScript] >=
            MSI_Players[CurrentPlayer].Scripts[CurrentScript].MaxLevel) then
        begin
          TakeScreen('MaxLevel');
          nPlayer := true;
          takeBreak := false;
          reason := 'Max level reached';
        end;

      if (nPlayer) then
      begin
        if (takeBreak) then
        begin
          MSI_HandleBreaking;
          MSI_FindRandoms(True);

          takeBreak := False;
        end else
          MSI_UnsetPlayer(reason, True);

        nPlayer := False;
        Break;
      end;

    until(not MSI_Players[CurrentPlayer].Active);
  until(AllPlayersInactive);

  if (AllPlayersInactive) then
  begin
    MSI_CloseHeader('All players inactive, terminating script!');
    Logout;
    MSI_ProgressReport;
    TerminateScript;
  end;
end;

(*
MSI_ScriptTerminate
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_ScriptTerminate;

Called upon termination of the script.  Ensures all DTMs/file/bitmaps have been
freed.

.. note::

  | Author: Coh3n & Shuttleu
  | Last Updated: 14 Feburary 2011 by Coh3n

Example:

.. code-block:: pascal

  AddOnTerminate(MSI_ScriptTerminate);
*)
procedure MSI_ScriptTerminate;
begin
  // Commit to stats
  stats_Commit;

  // Free DTMs and clear Remote file
  MSI_FreeAllItems;
  FreeSRL;

  if (MSI_Settings[SETUP_SAVE_DEBUG]) then
    CloseFile(DebugFile);

  Writeln('Thank-you for using MSI Phoenix scripts!');
end;
