(*
Obstacles
=========

The Obstacles file includes all routines that are used to solve obstacles such
as climbing a ladder or climbing over a wall.

The source for can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Obstacles.simba>`_.

*)

(*
MSI_GetObstacle
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_GetObstacle(obs: integer): TObstacle;

Returns a TObstacle record for the obstacle specified by 'obs'; 'obs' is a
constant that can be found in
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Globals.simba>`_ with the
prefix "OBS_".

.. note::

  | Author: The MSI Team
  | Last Updated: 17 March 2012 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(OBS_LADDER_DOWN_MINE_GUILD);
    writeln('Loaded obstacle: '+obs.name);
  end;
*)
function MSI_GetObstacle(obs: integer): TObstacle;
begin
  case obs of
    OBS_LADDER_MG_DOWN:
      with result do
      begin
        Name       := 'OBS_LADDER_MG_DOWN';
        ObjConst   := LADDER_MG_DOWN;
        ObjMir     := LADDER_MG_UP;
        ObjMirArea := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_LADDER_MG_UP:
      with result do
      begin
        Name       := 'OBS_LADDER_MG_UP';
        ObjConst   := LADDER_MG_UP;
        ObjMir     := LADDER_MG_DOWN;
        ObjMirArea := intToBox(MSCX - 85, MSCY - 85, MSCX + 85, MSCY + 85);
        MirAction  := moMove;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_WALL_FW:
      with result do
      begin
        Name       := 'OBS_WALL_FW';
        ObjConst   := WALL_FW;
        ObjMir     := WALL_FW;
        ObjMirArea := intToBox(MSCX - 50, MSCY - 50, MSCX + 50, MSY2 + 50); // Box around player
        MirAction  := moNothing;
        Camera     := ['w', SRL_ANGLE_HIGH];
      end;

    OBS_DOOR_CG_IN:
      with result do
      begin
        Name       := 'OBS_DOOR_CG_IN';
        MirText    := ['elcome', 'uild', 'aster', 'raft'];
        ObjConst   := DOOR_NORMAL;
        ObjMir     := DOOR_NORMAL;
        ObjMirArea := intToBox(MSCX - 100, MSCY - 100, MSCX + 100, MSCY - 20);
        MirAction  := moMove;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_DOOR_CG_OUT:
      with result do
      begin
        Name       := 'OBS_DOOR_CG_OUT';
        ObjConst   := DOOR_NORMAL;
        ObjMir     := DOOR_NORMAL;
        ObjMirArea := intToBox(MSCX - 100, MSCY, MSCX + 100, MSCY + 100);
        MirAction  := moMove;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_AIR:
      with result do
      begin
        Name       := 'OBS_RUINS_AIR';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_AIR;
        ObjMir     := PORTAL_AIR;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_AIR:
      with result do
      begin
        Name       := 'OBS_PORTAL_AIR';
        ObjConst   := PORTAL_AIR;
        ObjMir     := RUINS_AIR;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_EARTH:
      with result do
      begin
        Name       := 'OBS_RUINS_EARTH';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_EARTH;
        ObjMir     := PORTAL_EARTH;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['w', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_EARTH:
      with result do
      begin
        Name       := 'OBS_PORTAL_EARTH';
        ObjConst   := PORTAL_EARTH;
        ObjMir     := RUINS_EARTH;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_FIRE:
      with result do
      begin
        Name       := 'OBS_RUINS_FIRE';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_FIRE;
        ObjMir     := PORTAL_FIRE;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_FIRE:
      with result do
      begin
        Name       := 'OBS_PORTAL_FIRE';
        ObjConst   := PORTAL_FIRE;
        ObjMir     := RUINS_FIRE;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_WATER:
      with result do
      begin
        Name       := 'OBS_RUINS_WATER';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_WATER;
        ObjMir     := PORTAL_WATER;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_WATER:
      with result do
      begin
        Name       := 'OBS_PORTAL_WATER';
        ObjConst   := PORTAL_WATER;
        ObjMir     := RUINS_WATER;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_MIND:
      with result do
      begin
        Name       := 'OBS_RUINS_MIND';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_MIND;
        ObjMir     := PORTAL_MIND;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_MIND:
      with result do
      begin
        Name       := 'OBS_PORTAL_MIND';
        ObjConst   := PORTAL_MIND;
        ObjMir     := RUINS_MIND;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_RUINS_BODY:
      with result do
      begin
        Name       := 'OBS_RUINS_BODY';
        Symbol     := 'Runecrafting';
        ObjConst   := RUINS_BODY;
        ObjMir     := -1; // will check for black on minimap
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_PORTAL_BODY:
      with result do
      begin
        Name       := 'OBS_PORTAL_BODY';
        ObjConst   := PORTAL_BODY;
        ObjMir     := RUINS_BODY;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

    OBS_DOOR_CBRANGE:
      with result do
      begin
        Name       := 'OBS_DOOR_CBRANGE';
        ObjConst   := DOOR_NORMAL;
        ObjMir     := DOOR_NORMAL;
        ObjMirArea := MSBox;
        MirAction  := moNothing;
        Camera     := ['n', SRL_ANGLE_HIGH];
      end;

  end;

  result.constant := obs;
end;

(*
MSI_FindMirrorText
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindMirrorText(obs: TObstacle): boolean;

Returns true if the obstacle's (obs) mirror text is found in the RS chat box.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_FindMirrorText(obs)) then
    MSI_Debug('Found mirror text: ' + obs.mirText);
*)
function MSI_FindMirrorText(obs: TObstacle): boolean;
var
  i, x, y: integer;
begin
  if (length(obs.mirText) <= 0) then
  begin
    MSI_SubDebug('No text for obstacle: ' + obs.name);
    exit;
  end;

  for i := 0 to high(obs.mirText) do
    if (findText(x, y, obs.mirText[i], 'CharsNPC', MCX1, MCY1, MCX2, MCY2)) then
    begin
      result := true;
      MSI_SubDebug('Found mirror text: ' + obs.mirText[i]);
      break;
    end;
end;

(*
MSI_FindMirrorObject
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FindMirrorObject(obs: TObstacle): boolean;

Returns true if the obstacle's (obs) mirror object is found in the record's
search area.  Will move the mouse and check for uptext, just to be sure.  Will
also draw the search area in blue on the main screen.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (not MSI_FindMirrorObject(obs)) then
    MSI_Debug('Found mirror object: ' + obs.name);
*)
function MSI_FindMirrorObject(obs: TObstacle): boolean;
var
  mirObj: TMSObject;
begin
  mirObj := MSI_GetObject(obs.objMir);
  mirObj.searchArea := obs.objMirArea;

  {$IFDEF SMART}
  if (MSI_Settings[SETUP_DEBUG_SMART]) then
    SMART_DrawBoxEx(false{$IFDEF SIMBAMAJOR990}, false{$ENDIF}, mirObj.searchArea, clBlue);
  {$ENDIF}

  if (MSI_FindObject(mirObj, obs.mirAction)) then
  begin
    MSI_SubDebug('Found mirror object: ' + mirObj.name);
    result := true;
  end;
end;

(*
MSI_WaitForMirror
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitForMirror(obs: TObstacle): boolean;

Returns true when an obstacles 'mirror object' has appeared. For example, if
we're climbing a ladder, the mirror obstacle would be the ladder climbing down.
If reflection is enabled, it will check to see if the player is on the end tile,
and return true if they are.

.. note::

  | Author: Sir R. Magician & Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);

    // clickObstacle isn't a real function, just an example
    if (clickObstacle(obs)) then
      result := MSI_WaitForMirror(obs);
  end;
*)
function MSI_WaitForMirror(obs: TObstacle): boolean;
var
  t: integer;
  mirFound: boolean;
begin
  if (not loggedIn) then
    exit;

  t := (getSystemTime + 30000);

  repeat
    if (obs.objMir = -1) then
    begin
      MSI_SubDebug('Looking for black on the MM');
      mirFound := (countColorTolerance(MM_BLACK, MMX1, MMY1, MMX2, MMY2, 10) > 20);
    end else begin
      mirFound := MSI_FindMirrorText(obs);
      if (not mirFound) then
        mirFound := MSI_FindMirrorObject(obs);
    end;

    if (mirFound) then
    begin
      MSI_SubDebug('Found mirror');

      result := true;
      break;
    end;

    if (not result) then
      if ((t - getSystemTime) > 10000) then // reset after 10 seconds
        MSI_NotBoxes := [];

    wait(randomRange(250, 500));
  until(result or (getSystemTime > t));
end;

(*
MSI_SolveObstacle
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SolveObstacle(obs: TObstacle): boolean;

Returns true if the obstacle 'obs' is solved. Uses MSI_FindObject to find and
click the obstacle, then calls MSI_WaitForMirror to determine when the obstacle
has been passed.

.. note::

  | Author: Coh3n
  | Last Updated: 01 August 2011 by Coh3n

Example:

.. code-block:: pascal

  var
    obs: TObstacle;
  begin
    obs := MSI_GetObstacle(LADDER_MG_DOWN);
    result := MSI_SolveObstacle(obs);
  end;
*)
function MSI_SolveObstacle(obs: TObstacle): boolean;
var
  t: integer;
  obsObj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  MSI_AddHeader('MSI_SolveObstacle: ' + obs.name);
  obsObj := MSI_GetObject(obs.objConst);

  if (inRange(round(rs_GetCompassAngleDegrees), 5, 355)) then
    if ((varType(obs.camera[0]) = varString) and (obs.camera[0] = 'n')) then
      clickNorth(obs.camera[1])
    else
      if (obs.camera[1] <> true) then // camera will already be true because of walking & avoids a 2 second wait
        setAngle(obs.camera[1]);

  makeCompass(obs.camera[0]);

  while ((not result) and (t < 10)) do
  begin
    inc(t);

    //For door handling purposes
    if (obs.name = 'OBS_DOOR_CBRANGE') and (t > 2) then
    begin
      Result :=  True;
      Exit;
    end;

    if (MSI_FindObject(obsObj, moLeft)) then
    begin
      MSI_Debug('Clicked obstacle');
      wait(randomRange(1500, 2000));
      result := MSI_WaitForMirror(obs);
    end else begin
      obsObj.rightClickOnly := true; // in case uptext is failing
      obsObj.tol[0] := (obsObj.tol[0] + 1)
      MSI_NotBoxes := [];
    end;
  end;

  MSI_CloseHeader('MSI_SolveObstacle: ' + boolToStr(result));
end;

