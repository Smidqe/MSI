(*
Fishing
=======

The Fishing file stores any functions or procedures that are specific to the
fishing skill.

The source for Fishing.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Skills/Fishing.simba>`_.

*)

(*
MSI_FishingTools
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FishingTools(Obj: Integer): TIntegerArray;

Returns all the required fishing tools to fish at the fishing spot 'Obj'.

.. note::

  | Author: 3Garrett3
  | Last Updated: 07 October 2010 by Coh3n

Example:

.. code-block:: pascal

  // This will return the constant values for a fly fishing tod and feathers
  tools := MSI_FishingTools(FISHSPOT_LURE);
*)
function MSI_FishingTools(Obj: Integer): TIntegerArray;
var
  i, x, y: Integer;
begin
  case (Obj) of
    FISHSPOT_NET:
      Result := [FISH_SMALLNET];

    FISHSPOT_BAIT:
      Result := [FISH_ROD_BAIT, FISH_BAIT];

    FISHSPOT_LURE:
      Result := [FISH_ROD_FLY, MISC_FEATHER];

    FISHSPOT_CAGE:
      Result := [FISH_POT_LOBSTER];

    FISHSPOT_HARPOON, FISHSPOT_HARPOON_SHARK:
      with MSI_Players[CurrentPlayer] do
      begin
        if (member) then
        begin
          if (reportInfo.skillLevels[CurrentScript] >= 35) then
            for i := tab_Inv to tab_Equip do // gameTab called in FindTool
              if (MSI_FindTool(FISH_HARPOON_BARB, i, x, y)) then
                result := [FISH_HARPOON_BARB];
        end else
          result := [FISH_HARPOON];
      end;

    else
      MSI_Debug('Invalid Fishing Spot Argument');
  end;

  MSI_SubDebug('Tools: ' + ToStr(Result));
end;

(*
MSI_SetupFishing
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupFishing(): Boolean;

Sets the player up for fishing.  Will look for all the required tools for each
of the players fishing spots.  If a tool(s) isn't found, will attempt to
withdraw from the bank.  If the tool can't be withdrawn, the fishing spot is
removed from the player's fishing spots.  This is the procedure that is
pointed to a fishing script's 'PlayerSetup' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 06 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_DB_FISHER].PlayerSetup := @MSI_SetupFishing;
*)
function MSI_SetupFishing(): Boolean;
var
  i, j, t, x, y: Integer;
  tools, intObjs, newObjs: TIntegerArray;
  toWithdraw: array of TIntegerArray;
  objReady: TBooleanArray;
  curScript: TScript;
  fishSpot: TMSObject;
  b, canBank, found: Boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetupFishing');

  with MSI_Players[CurrentPlayer] do
  begin
    SetLength(objReady, Length(Scripts[CurrentScript].FishSpots));
    SetLength(toWithdraw, Length(Scripts[CurrentScript].FishSpots));
    curScript := MSI_Scripts[Scripts[CurrentScript].Name];
    intObjs := Scripts[CurrentScript].FishSpots;

    MSI_Debug('FishSpots: ' + ToStr(Scripts[CurrentScript].FishSpots));

    // Loops through the player objects checking for the required tools for each
    for i := 0 to High(intObjs) do
    begin
      tools := MSI_FishingTools(intObjs[i]); // Gets the required fishing tools for the fishing spot

      for j := 0 to High(tools) do
      begin
        found := MSI_FindTool(tools[j], TAB_INV, x, y);
        if (not found) then
          if (MSI_Items[tools[j]].EquipLevel > 0) then
            found := MSI_FindTool(tools[j], TAB_EQUIP, x, y);

        if (not found) then
        begin
          setLength(toWithdraw[i], length(toWithdraw[i]) + 1);
          toWithdraw[i][high(toWithdraw[i])] := tools[j]; // Adds to the array if the tool isn't found
        end;
      end;
    end;

    // In a separate loop so it only opens the bank once
    for i := 0 to High(intObjs) do
      if (Length(toWithdraw[i]) <= 0) then // If all tools are found
        objReady[i] := True
      else begin // if 1+ tools aren't found
        // if either the starting or ending locations are bankable
        if (MSI_Locations[curScript.pathInfo.startLoc].AtBank or MSI_Locations[curScript.pathInfo.endLoc].AtBank) then
        begin
          canBank := MSI_Locations[Location].AtBank;
          if (not canBank) then
            canBank := MSI_WalkPath(curScript.pathInfo, false);
        end;

        if (canBank) then
          if (MSI_OpenBank(curScript.WhichBank, Pin)) then
            if (MSI_Withdraw(toWithdraw[i], [])) then
            begin
              for j := 0 to High(toWithdraw[i]) do
              begin
                t := GetSystemTime + 2000;
                while (GetSystemTime < t) do
                begin
                  Wait(300 + Random(200));
                  if (MSI_FindTool(toWithdraw[i][j], TAB_INV, x, y)) then
                    Break;
                end;

                if (j = High(toWithdraw[i])) then
                  objReady[i] := True;
              end;
            end;
      end;

    for i := 0 to High(objReady) do
      if (objReady[i]) then
      begin
        setLength(newObjs, length(newObjs) + 1);
        newObjs[high(newObjs)] := intObjs[i];
      end else begin
        fishSpot := MSI_GetObject(intObjs[i]);
        MSI_Debug(fishSpot.name + ': Required tools not found');
        MSI_Deposit(MSI_FishingTools(intObjs[i]), [], b);
      end;

    // Resets the objects so if the tools aren't found it will still fish in the spots for which the tools were found
    Scripts[CurrentScript].FishSpots := newObjs;
    Result := (Length(Scripts[CurrentScript].FishSpots) > 0);

    for i := 0 to High(Scripts[CurrentScript].FishSpots) do
    begin
      fishSpot := MSI_GetObject(Scripts[CurrentScript].FishSpots[i]);
      MSI_Debug('Fishing spot ' + IntToStr(i) + ': ' + fishSpot.name);
    end;

    if (MSI_Locations[Location].AtBank) or
       (MSI_Scripts[Scripts[CurrentScript].Name].BankType = NPC) then
      if (InvFull) then
        MSI_Scripts[Scripts[CurrentScript].Name].BankObjects();
  end;

  MSI_CloseHeader('MSI_SetupFishing: ' + BoolToStr(Result));
end;

(*
MSI_WaitWhileFishing
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WaitWhileFishing(fishSpot: TMSObject): boolean;

Waits while the player is fishing.  Uses a combination of inventory checks,
timers, animations and object finding to detemerine whether or not the player
is still fishing.

.. note::

  | Author: 3Garrett3
  | Last Updated: 07 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_FindObject(fishSpot, ClickLeft)) then
    Result := MSI_WaitWhileFishing(fishSpot, failed);
*)
function MSI_WaitWhileFishing(fishSpot: TMSObject): boolean;
var
  i, h, x, y, CTS, animTries, colTries, oldInvCount, waitTime, invTimer: integer;
  idle: TAnimation;
  arr: TPointArray;
  ATPA: T2DPointArray;
begin
  if (not loggedIn) then
    exit;

  if (invFull) then
  begin
    result := true;
    exit;
  end;

  MSI_AddHeader('MSI_WaitWhileFishing');
  fishSpot.searchArea := MSI_MakeBox(point(fishSpot.x, fishSpot.y), fishSpot.w, fishSpot.h);

  idle := MSI_GetAnimation(ANIM_IDLE);
  waitTime := (getSystemTime + (60000 * 3));
  oldInvCount := invCount;
  markTime(invTimer);
  flag;

  CTS := getToleranceSpeed();
  MSI_Debug('Current CTS: ' + intToStr(CTS));

  setColorToleranceSpeed(2);
  setToleranceSpeed2Modifiers(fishSpot.hue, fishSpot.sat);

  setLength(ATPA, length(fishSpot.colors));
  h := high(ATPA);

  for i := 0 to h do
    findColorsTolerance(ATPA[i], fishSpot.colors[i],
                        fishSpot.searchArea.x1, fishSpot.searchArea.y1,
                        fishSpot.searchArea.x2, fishSpot.searchArea.y2,
                        fishSpot.tol);

  arr := mergeATPA(ATPA);

  repeat
    result := true;

    if (MSI_FindRandoms(false)) then
      break;

    // check for the "you're out of bait" text in the chat box
    if (findText(x, y, 'left', NPCChars, MCX1, MCY1, MCX2, MCY2)) then
    begin
      MSI_Debug('We have run out of fishing bait!');
      result := false;
      break;
    end;

    // check for the "you need tool to fish" message
    if (findText(x, y, 'need', NPCChars, MCX1, MCY1, MCX2, MCY2)) then
    begin
      MSI_Debug('Accidentially clicked wrong fishing spot');
      break;
    end;

    // looking for fishing spot
    for i := 0 to h do
      findColorsTolerance(ATPA[i], fishSpot.colors[i],
                          fishSpot.searchArea.x1, fishSpot.searchArea.y1,
                          fishSpot.searchArea.x2, fishSpot.searchArea.y2,
                          fishSpot.tol);

    arr := mergeATPA(ATPA);

    {$IFDEF SMART}
    if (MSI_Settings[SETUP_DEBUG_SMART]) then
    begin
      SMART_DrawBoxEx(true, fishSpot.searchArea, clBlue);
      SMART_DrawDotsEx(false, arr, clRed);
    end;
    {$ENDIF}

    if (length(arr) < fishSpot.accuracy) then
    begin
      MSI_Debug('Fishing spot not found');
      inc(colTries);
    end else begin
      MSI_Debug('Fishing spot found');
      colTries := 0;
    end;

    MSI_AntiBan(randomRange(0, 3000), ANTI_BAN_CHANCE);

    if (invFull) then
    begin
      MSI_Debug('Inventory is full');
      break;
    end;

    MSI_Debug('Checking inventory count');
    if (timeFromMark(invTimer) > 45000) then // if no new fish in inv after 30 seconds, spot probably moved
      if (oldInvCount = invCount) then
      begin
        MSI_SubDebug('Nothing caught for more than 45 seconds');
        break;
      end else begin
        MSI_SubDebug('Got more fish, setting new inventory count');
        oldInvCount := invCount;
        markTime(invTimer);
      end;

    MSI_Debug('Checking player''s pixel shifting');
    if (MSI_IsAnimating(idle)) then // check to see if the player is still animating
    begin
      MSI_SubDebug('Player isn''t animating');
      inc(animTries);
    end else begin
      MSI_SubDebug('Player is animating');
      animTries := 0;
    end;

    // breaks out after 3 minutes (assumes the player isn't fishing)
    if (waitTime < getSystemTime) then
    begin
      MSI_Debug('Been fishing for 3 minutes straight, breaking as failsafe');
      break;
    end;

    wait(randomRange(300, 700));
  until((not loggedIn) or (animTries >= 10) or (colTries >= 3));

  MSI_CloseHeader('MSI_WaitWhileFishing: ' + boolToStr(result));

  setColorToleranceSpeed(CTS);
  setToleranceSpeed2Modifiers(0.2, 0.2);
end;

(*
MSI_Fish
~~~~~~~~

.. code-block:: pascal

  function MSI_Fish(which: TIntegerArray): boolean;

Fishes at the first fishing spot it finds from the array 'which'.  Will return
false if the player runs out of bait or loses a required tool.  If such a thing
happens, that fishing spot is removed from the player's fishing spots array.

.. note::

  | Author: 3Garrett3
  | Last Updated: 07 August 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_Fish([FISHSPOT_NET])) then
    MSI_Debug('Fished');
*)
function MSI_Fish(which: TIntegerArray): boolean;
var
  t, i: integer;
  tools: TIntegerArray;
  objs: TMSObjectArray;
  obj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  objs := MSI_GetObjects(which);

  with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
    if (MSI_FindObjects(objs, moLeft, obj)) then
    begin
      result := MSI_WaitWhileFishing(obj);

      if (not result) then
        if (length(fishSpots) > 1) then
        begin

          if (inIntArrayEx(fishSpots, t, obj.constant)) then
          begin
            MSI_SubDebug('Removing '+obj.name+' from FishSpot array');
            deleteValueInIntArray(fishSpots, t);
            deleteValueInIntArray(priority, t);

            // Remove tools
            tools := MSI_FishingTools(obj.constant);
            for i := 0 to High(tools) do
              MSI_DeleteException(tools[i], MSI_Items[tools[i]].invSlot);
          end;

        end else begin
          MSI_Players[CurrentPlayer].ReportInfo.FalseReason := 'Ran out of fishing bait';
          result := false;
        end;
    end else
      MSI_FindRandoms(false);
end;

(*
MSI_FishInvFull
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FishInvFull: boolean;

Calls MSI_AutoInvFull (
`Skills.simba <https://github.com/SRL/MSI/raw/master/MSI/Skills/Skills.simba>`_)
and is pointed to a fishing script's 'AutoObjects' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_DB_FISHER].AutoObjects := @MSI_FishInvFull;
*)
function MSI_FishInvFull: boolean;
begin
  result := MSI_AutoInvFull(@MSI_Fish); // MSI_AutoInvFull in Skills.simba
end;



